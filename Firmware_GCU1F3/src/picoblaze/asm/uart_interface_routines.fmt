                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Copyright Â© 2011-2012, Xilinx, Inc.
                      ; This file contains confidential and proprietary information of Xilinx, Inc. and is
                      ; protected under U.S. and international copyright and other intellectual property laws.
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Disclaimer:
                      ; This disclaimer is not a license and does not grant any rights to the materials
                      ; distributed herewith. Except as otherwise provided in a valid license issued to
                      ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
                      ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
                      ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
                      ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
                      ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
                      ; (whether in contract or tort, including negligence, or under any other theory
                      ; of liability) for any loss or damage of any kind or nature related to, arising
                      ; under or in connection with these materials, including for any direct, or any
                      ; indirect, special, incidental, or consequential loss or damage (including loss
                      ; of data, profits, goodwill, or any type of loss or damage suffered as a result
                      ; of any action brought by a third party) even if such damage or loss was
                      ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
                      ;
                      ; CRITICAL APPLICATIONS
                      ; Xilinx products are not designed or intended to be fail-safe, or for use in any
                      ; application requiring fail-safe performance, such as life-support or safety
                      ; devices or systems, Class III medical devices, nuclear facilities, applications
                      ; related to the deployment of airbags, or any other applications that could lead
                      ; to death, personal injury, or severe property or environmental damage
                      ; (individually and collectively, "Critical Applications"). Customer assumes the
                      ; sole risk and liability of any use of Xilinx products in Critical Applications,
                      ; subject only to applicable laws and regulations governing limitations on product
                      ; liability.
                      ;
                      ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
                      ;
                      ;------------------------------------------------------------------------------------------
                      ;
                      ;             _  ______ ____  ____  __  __  __
                      ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
                      ;            | ' / |   | |_) \___ \| |\/| | '_ \
                      ;            | . \ |___|  __/ ___) | |  | | (_) )
                      ;            |_|\_\____|_|   |____/|_|  |_|\___/
                      ;
                      ;
                      ;                PicoBlaze Reference Design.
                      ;
                      ;
                      ; Ken Chapman - Xilinx Ltd
                      ;
                      ; 23rd April 2012 - Initial Release
                      ; 24th July 2012 - Corrections to comments only
                      ;
                      ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
                      ; and was first supplied with a reference design called 'uart6_605' included in the
                      ; PicoBlaze package. The routines enable characters to be transmitted to and received
                      ; from the UART macros as well as perform a reset of the FIFO the buffers.
                      ;
                      ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
                      ;            the reference design stated above includes this file and calls the routines
                      ;            contained in this file.
                      ;
                      ;                INCLUDE "uart_interface_routines.psm"
                      ;
                      ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
                      ;
                      ;
                      ; Whilst the reference design stated above was presented for the UART macros connected to
                      ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
                      ; any design for any board simply by setting the appropriate values in the CONSTANT
                      ; directives described below.
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Hardware Constants
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; The CONSTANT directives below define the input and output ports assigned to the UART
                      ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
                      ; Additional constants identify the allocation of signals to bits within a port.
                      ;
                      ;
                      CONSTANT hex_value0, 00        ;16-bit value (lower byte)
                      CONSTANT hex_value1, 01        ;16-bit value (upper byte)
                      ;
                      CONSTANT decimal0, 02          ;5 digit decimal value
                      CONSTANT decimal1, 03          ;  Suitable for 16-bit values up to
                      CONSTANT decimal2, 04          ;   65,536
                      CONSTANT decimal3, 05
                      CONSTANT decimal4, 06
                      ;
                      ; UART Status
                      ; -----------
                      ;
                      CONSTANT UART_status_port, 00  ; Read status
                      CONSTANT UART_Tx_data_present, 00000001'b ; Tx   data_present - bit0
                      CONSTANT UART_Tx_half_full, 00000010'b ;         half_full - bit1
                      CONSTANT UART_Tx_full, 00000100'b ;              full - bit2
                      CONSTANT UART_Rx_data_present, 00001000'b ; Rx   data_present - bit3
                      CONSTANT UART_Rx_half_full, 00010000'b ;         half_full - bit4
                      CONSTANT UART_Rx_full, 00100000'b ;              full - bit5
                      ;
                      ; Write data to UART_TX6
                      ; ----------------------
                      ;
                      CONSTANT UART_TX6_output_port, 01
                      ;
                      ; Read data from UART_RX6
                      ; -----------------------
                      ;
                      CONSTANT UART_RX6_input_port, 01
                      ;
                      ; Reset UART buffers (Constant Optimised Port)
                      ; --------------------------------------------
                      ;
                      CONSTANT reset_UART_port, 01
                      CONSTANT UART_tx_reset, 00000001'b ; uart_tx6 reset - bit0
                      CONSTANT UART_rx_reset, 00000010'b ; uart_rx6 reset - bit1
                      CONSTANT UART_reset, 00000011'b ; reset Tx and Rx
                      CONSTANT UART_operate, 00000000'b ; Tx and Rx free to operate
                      ;
                      ;
                      ;--------------------------------------------------------------------------------------
                      ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
                      ;--------------------------------------------------------------------------------------
                      ;
                      ; This routine will generate and apply an active High reset pulse to  the FIFO
                      ; buffers in both the transmitter and receiver macros.
                      ;
                      ; Note that the reset signals have been assigned to a constant optimised output port
                      ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
                      ;
                      ;
   reset_UART_macros:
                      OUTPUTK UART_reset, reset_UART_port
                      OUTPUTK UART_operate, reset_UART_port
                      RETURN
                      ;
                      ;
                      ;--------------------------------------------------------------------------------------
                      ; Routine to send one character to the UART Transmitter 'uart_tx6'
                      ;--------------------------------------------------------------------------------------
                      ;
                      ; This routine will transmit the character provided in register 's5'.
                      ;
                      ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
                      ; is checked to see if there is space. If the buffer is full then this routine will
                      ; wait for space to become available (e.g. the time required for a previous character
                      ; to be transmitted by the UART).
                      ;
                      ; Registers used s0 and s5 for the data (which is preserved)
                      ;
             UART_TX:
                      INPUT s0, UART_status_port     ;Check if buffer is full
                      TEST s0, UART_Tx_full
                      JUMP NZ, UART_TX               ;wait if full
                      OUTPUT s5, UART_TX6_output_port
                      RETURN
                      ;
                      ;
                      ;--------------------------------------------------------------------------------------
                      ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
                      ;--------------------------------------------------------------------------------------
                      ;
                      ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
                      ; successful, will return that character in register 's5' and the Zero flag will be
                      ; reset (Z=0).
                      ;
                      ; If there are no characters available to be read from the FIFO buffer within the
                      ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
                      ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
                      ; cannot become stuck in this routine if no characters are received. If you do want
                      ; KCPSM6 to wait indefinitely for a character to be received then either modify this
                      ; routine or perform a test of the Zero flag and repeat the call to this routine as
                      ; shown in this example...
                      ;
                      ;          wait_for_UART_RX: CALL UART_RX
                      ;                            JUMP Z, wait_for_UART_RX
                      ;
                      ;
                      ; Registers used s0, s1 and s5.
                      ;
             UART_RX:
                      LOAD s1, 167'd                 ;Timeout = 167 x (6 instructions x 2 clock cycles)
          rx_timeout:
                      INPUT s0, UART_status_port
                      TEST s0, UART_Rx_data_present  ;Z=0 and C=1 when data present
                      JUMP NZ, read_Rx
                      SUB s1, 1'd
                      RETURN Z                       ;Timeout returns with Z=1 and C=0
                      JUMP rx_timeout
             read_Rx:
                      INPUT s5, UART_RX6_input_port  ;read character from buffer
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; End of 'uart_interface_routines.psm"'
                      ;------------------------------------------------------------------------------------------
                      ;


                      ;------------------------------------------------------------------------------------------
                      ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; ANSI Escape Sequences/codes (VT100)
                      ;
        clear_screen:
                      LOAD s5, ESC                   ;clear terminal sequence
                      CALL UART_TX
                      LOAD s5, "["
                      CALL UART_TX
                      LOAD s5, "2"
                      CALL UART_TX
                      LOAD s5, "J"
                      CALL UART_TX
                      CALL delay_1ms                 ;Delay for reliable operation
                      RETURN
                      ;
         cursor_home:
                      LOAD s5, ESC                   ;Send cursor to upper-left of display
                      CALL UART_TX
                      LOAD s5, "["
                      CALL UART_TX
                      LOAD s5, "H"
                      CALL UART_TX
                      CALL delay_1ms                 ;Delay for reliable operation
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Send Carriage Return to UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Registers used s0, s1, s2, and s5.
                      ;
             send_CR:
                      LOAD s5, CR
                      JUMP UART_TX                   ;includes RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Send New Line to UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Registers used s0, s1, s2, and s5.
                      ;
             send_NL:
                      LOAD s5, 0x0a
                      JUMP UART_TX                   ;includes RETURN
                      ;------------------------------------------------------------------------------------------
                      ; Send a Space to UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Registers used s0, s1, s2, and s5.
                      ;
          send_space:
                      LOAD s5, " "
                      JUMP UART_TX                   ;includes RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Send Hex Value of 16-bit word to UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
                      ; transmitter.
                      ;
                      ; Registers used s0, s1, s2, s4, s5, sA and sB.
                      ;
       send_hex_word:
                      LOAD s4, sb
                      CALL send_hex_byte
                      LOAD s4, sa
                      JUMP send_hex_byte             ;includes RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Send Hex Value of Byte to UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
                      ;
                      ; Registers used s0, s4 (preserved) and s5.
                      ;
       send_hex_byte:
                      LOAD s5, s4                    ;isolate upper nibble
                      SR0 s5
                      SR0 s5
                      SR0 s5
                      SR0 s5
                      CALL hex_to_ASCII              ; convert to ASCII
                      CALL UART_TX                   ;send upper digit to UART
                      LOAD s5, s4                    ;isolate lower nibble
                      AND s5, 0F
                      CALL hex_to_ASCII              ; convert to ASCII
                      CALL UART_TX                   ;send lower digit to UART
                      RETURN
                      ;
                      ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
                      ;
                      ; Register used s5
                      ;
        hex_to_ASCII:
                      SUB s5, 0A                     ;test if value is in range 0 to 9
                      JUMP C, number_char
                      ADD s5, 07                     ;ASCII char A to F in range 41 to 46
         number_char:
                      ADD s5, 3A                     ;ASCII char 0 to 9 in range 30 to 40
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Converts character to upper case
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Tests and converts character in 's5' (if necessary).
                      ;
                      ; To convert character to upper case
                      ;
                      ; If the character is in the range 'a' to 'z', it is converted
                      ; to the equivalent upper case character in the range 'A' to 'Z'.
                      ; All other characters remain unchanged.
                      ;
          upper_case:
                      COMPARE s5, "a"                ;eliminate character codes below 'a' (61 hex)
                      RETURN C
                      COMPARE s5, 7B                 ;eliminate character codes above 'z' (7A hex)
                      RETURN NC
                      AND s5, 11011111'b             ;force bit5 Low to convert to upper case
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Convert ASCII character to an equivalent HEX value.
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
                      ; If character is not valid for hex, then CARRY is set on return.
                      ;
                      ; Register used s5
                      ;
        ASCII_to_hex:
                      ADD s5, B9                     ;test for above ASCII code 46 ('F')
                      RETURN C
                      SUB s5, E9                     ;normalise 0 to 9 with A-F in 11 to 16 hex
                      RETURN C                       ;reject below ASCII code 30 ('0')
                      SUB s5, 11                     ;isolate A-F down to 00 to 05 hex
                      JUMP NC, ASCII_letter
                      ADD s5, 07                     ;test for above ASCII code 46 ('F')
                      RETURN C
                      SUB s5, F6                     ;convert to range 00 to 09
                      RETURN
        ASCII_letter: ADD s5, 0A                     ;convert to range 0A to 0F
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
                      ; register set. The number of characters to be read must be defined in sE. When less than
                      ; 8 characters are read the value is returned in the least significant bits of the register
                      ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
                      ; nibble will be zero if an odd number of digits are read.
                      ;
                      ; If any character received from the UART is not in the range 0 to F then the routine will
                      ; end immediately with the CARRY flag set and this should be checked by the calling process
                      ; upon return.
                      ;
        obtain_value:
                      LOAD sa, 00                    ;initialise potentially unused bits to zero
        obtain_digit:
                      CALL UART_RX                   ;wait for a character and return in s5
                      JUMP Z, obtain_digit           ;continue to wait if timeout occurs
                      CALL UART_TX                   ;echo character as entered
                      CALL upper_case                ;convert to upper case if necessary
                      CALL ASCII_to_hex              ;convert value in s5 to hex nibble
                      RETURN C                       ;If invalid hex digit then return immediately
                      LOAD s0, 4'd                   ;shift [sD,sC,sB,sA] left by 4 bits
         build_value:
                      SL0 sa                         ;  to make space for new digit value
                      SLA sb
                      SLA sc
                      SLA sd
                      SUB s0, 1'd
                      JUMP NZ, build_value
                      OR sa, s5                      ;merge value of new digit into existing value
                      SUB se, 01                     ;count number of digits obtained
                      JUMP NZ, obtain_digit
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; Send integer in decimal format to UART Tx
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
                      ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
                      ;
                      ;
        send_integer:
                      COMPARE s2, 00                 ;test for special case of zero
                      COMPARECY s3, 00
                      JUMP Z, zero_integer
                      CALL integer16_to_BCD          ;Convert to BCD in SPM
                      LOAD sa, decimal4              ;pointer to BCD in SPM
                      LOAD sb, 0'd                   ;flag for leading zero blanking
   send_integer_loop:
                      FETCH s5, (sa)
                      ADD sb, s5                     ;make sB non-zero to stop blanking
                      COMPARE sb, 0'd                ;Test for blanking
                      JUMP Z, next_int_digit
                      ADD s5, "0"                    ;convert to ASCII
                      CALL UART_TX                   ;send digit
      next_int_digit:
                      COMPARE sa, decimal0
                      RETURN Z
                      SUB sa, 1'd                    ;move pointer to next digit
                      JUMP send_integer_loop
        zero_integer:
                      LOAD s5, "0"                   ;special response for zero
                      CALL UART_TX
                      RETURN
                      ;
                      ;
                      ;------------------------------------------------------------------------------------------
                      ; 16-bit integer to BCD conversion
                      ;------------------------------------------------------------------------------------------
                      ;
                      ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
                      ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
                      ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
                      ;
                      ; Each digit is formed in turn starting with the least significant. The value
                      ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
                      ; is the value of each digit in the range 0 to 9.
                      ;
                      ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
                      ;
    integer16_to_BCD:
                      LOAD s4, decimal0              ;pointer for LS-Digit in scratch pad memory
     int_to_BCD_loop:
                      CALL divide_16bit_by_10
                      STORE sa, (s4)                 ;remainder is the digit value
                      COMPARE s4, decimal4           ;test for MS-Digit completed
                      RETURN Z
                      ADD s4, 1'd                    ;advance pointer to next digit
                      JUMP int_to_BCD_loop
                      ;
                      ; Divide 16-bit binary integer by 10
                      ;
                      ; The value to be divided by 10 should be provided in register set [s3,s2].
                      ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
                      ; with any remainder in (0 to 9) in register sA.
                      ;
                      ; Registers used s0,s2,s3,s8,s9,sA,sB
                      ;
  divide_16bit_by_10:
                      LOAD sa, s2                    ;copy input value into [sB,sA]
                      LOAD sb, s3
                      LOAD s2, 00                    ;clear division result
                      LOAD s3, 00
                      LOAD s9, A0                    ;initialise [s9,s8] with '10' in MSBs
                      LOAD s8, 00
                      LOAD s0, 13'd                  ;13 subtract and shift iterations to be performed
          div10_loop:
                      SUB sa, s8                     ;perform 16-bit subtract [sB,sA]-[s9,s8]
                      SUBCY sb, s9
                      JUMP C, div10_restore          ;if carry then could not subtract from total
                      SL1 s2                         ;shift '1' into result because subtract ok
                      JUMP div10_shifts
       div10_restore:
                      ADD sa, s8                     ;perform 16-bit addition [sB,sA]+[s9,s8]
                      ADDCY sb, s9                   ;to restore total
                      SL0 s2                         ;shift '0' into result because could no subtract
        div10_shifts:
                      SLA s3                         ;complete 16-bit shift left into [s3,s2]
                      SR0 s9                         ;divide '10' value by 2 (shift right 1 place)
                      SRA s8
                      SUB s0, 01                     ;count iterations
                      RETURN Z                       ;on return the remainder of division is in sA
                      JUMP div10_loop

                      ;;  return received char in s5
                      ;;  echo the received char
         obtain_char:
                      CALL UART_RX
                      JUMP z, obtain_char
                      CALL UART_TX
                      RETURN




        send_message:
                      CALL@ (sb, sa)
                      COMPARE s5, 00                 ;terminate on NUL character
                      RETURN Z
                      CALL UART_TX
                      ADD sa, 1'd
                      ADDCY sb, 0'd
                      JUMP send_message

         send_64_bit:
                      FETCH s4, Saved_Byte3
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte2
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte1
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte0
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte7
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte6
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte5
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte4
                      CALL send_hex_byte
                      RETURN

         send_32_bit:
                      FETCH s4, Saved_Byte3
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte2
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte1
                      CALL send_hex_byte
                      FETCH s4, Saved_Byte0
                      CALL send_hex_byte
                      RETURN

