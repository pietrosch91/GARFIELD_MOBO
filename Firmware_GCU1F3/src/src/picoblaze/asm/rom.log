Open PicoBlaze Assembler log for program "sja1105_terminal.asm"
Generated by opbasm v1.3
  Assembled on 2020-02-20T12:42:59
  PicoBlaze-6 mode

  Last occupied address: 710 hex
  Nominal program memory size: 2K (2048)  address(10:0)
  Actual memory size: 4096
  Occupied memory locations: 1809
  Memory locations available: 2287
  Scratchpad size: 256


Optimizations
-------------
  Static analysis:
    Dead instructions removed: 83
    Analyzed entry points: 0x000, 0x3FF, 0x763


Assembly listing
----------------
000                                  ;== PREAMBLE
000  226F1                           JUMP main
001                                  ;REMOVED: JUMP main
001                                  ;REMOVED: JUMP main
001                                  ;REMOVED: JUMP main
                                     ;
001                                  ;------------------------------------------------------------------------------------------
001                                  ; Copyright Â© 2011-2012, Xilinx, Inc.
001                                  ; This file contains confidential and proprietary information of Xilinx, Inc. and is
001                                  ; protected under U.S. and international copyright and other intellectual property laws.
001                                  ;------------------------------------------------------------------------------------------
                                     ;
001                                  ; Disclaimer:
001                                  ; This disclaimer is not a license and does not grant any rights to the materials
001                                  ; distributed herewith. Except as otherwise provided in a valid license issued to
001                                  ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
001                                  ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
001                                  ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
001                                  ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
001                                  ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
001                                  ; (whether in contract or tort, including negligence, or under any other theory
001                                  ; of liability) for any loss or damage of any kind or nature related to, arising
001                                  ; under or in connection with these materials, including for any direct, or any
001                                  ; indirect, special, incidental, or consequential loss or damage (including loss
001                                  ; of data, profits, goodwill, or any type of loss or damage suffered as a result
001                                  ; of any action brought by a third party) even if such damage or loss was
001                                  ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
                                     ;
001                                  ; CRITICAL APPLICATIONS
001                                  ; Xilinx products are not designed or intended to be fail-safe, or for use in any
001                                  ; application requiring fail-safe performance, such as life-support or safety
001                                  ; devices or systems, Class III medical devices, nuclear facilities, applications
001                                  ; related to the deployment of airbags, or any other applications that could lead
001                                  ; to death, personal injury, or severe property or environmental damage
001                                  ; (individually and collectively, "Critical Applications"). Customer assumes the
001                                  ; sole risk and liability of any use of Xilinx products in Critical Applications,
001                                  ; subject only to applicable laws and regulations governing limitations on product
001                                  ; liability.
                                     ;
001                                  ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
                                     ;
001                                  ;------------------------------------------------------------------------------------------
                                     ;
001                                  ;             _  ______ ____  ____  __  __  __
001                                  ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
001                                  ;            | ' / |   | |_) \___ \| |\/| | '_ \
001                                  ;            | . \ |___|  __/ ___) | |  | | (_) )
001                                  ;            |_|\_\____|_|   |____/|_|  |_|\___/
                                     ;
                                     ;
001                                  ;                PicoBlaze Reference Design.
                                     ;
                                     ;
001                                  ; Ken Chapman - Xilinx Ltd
                                     ;
001                                  ; 23rd April 2012 - Initial Release
001                                  ; 24th July 2012 - Corrections to comments only
                                     ;
001                                  ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
001                                  ; and was first supplied with a reference design called 'uart6_605' included in the
001                                  ; PicoBlaze package. The routines enable characters to be transmitted to and received
001                                  ; from the UART macros as well as perform a reset of the FIFO the buffers.
                                     ;
001                                  ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
001                                  ;            the reference design stated above includes this file and calls the routines
001                                  ;            contained in this file.
                                     ;
001                                  ;                INCLUDE "uart_interface_routines.psm"
                                     ;
001                                  ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
                                     ;
                                     ;
001                                  ; Whilst the reference design stated above was presented for the UART macros connected to
001                                  ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
001                                  ; any design for any board simply by setting the appropriate values in the CONSTANT
001                                  ; directives described below.
                                     ;
                                     ;
001                                  ;------------------------------------------------------------------------------------------
001                                  ; Hardware Constants
001                                  ;------------------------------------------------------------------------------------------
                                     ;
001                                  ; The CONSTANT directives below define the input and output ports assigned to the UART
001                                  ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
001                                  ; Additional constants identify the allocation of signals to bits within a port.
                                     ;
                                     ;
001                                  CONSTANT hex_value0, 00        ;16-bit value (lower byte)
001                                  CONSTANT hex_value1, 01        ;16-bit value (upper byte)
                                     ;
001                                  CONSTANT decimal0, 02          ;5 digit decimal value
001                                  CONSTANT decimal1, 03          ;  Suitable for 16-bit values up to
001                                  CONSTANT decimal2, 04          ;   65,536
001                                  CONSTANT decimal3, 05
001                                  CONSTANT decimal4, 06
                                     ;
001                                  ; UART Status
001                                  ; -----------
                                     ;
001                                  CONSTANT UART_status_port, 00  ; Read status
001                                  CONSTANT UART_Tx_data_present, 00000001'b ; Tx   data_present - bit0
001                                  CONSTANT UART_Tx_half_full, 00000010'b ;         half_full - bit1
001                                  CONSTANT UART_Tx_full, 00000100'b ;              full - bit2
001                                  CONSTANT UART_Rx_data_present, 00001000'b ; Rx   data_present - bit3
001                                  CONSTANT UART_Rx_half_full, 00010000'b ;         half_full - bit4
001                                  CONSTANT UART_Rx_full, 00100000'b ;              full - bit5
                                     ;
001                                  ; Write data to UART_TX6
001                                  ; ----------------------
                                     ;
001                                  CONSTANT UART_TX6_output_port, 01
                                     ;
001                                  ; Read data from UART_RX6
001                                  ; -----------------------
                                     ;
001                                  CONSTANT UART_RX6_input_port, 01
                                     ;
001                                  ; Reset UART buffers (Constant Optimised Port)
001                                  ; --------------------------------------------
                                     ;
001                                  CONSTANT reset_UART_port, 01
001                                  CONSTANT UART_tx_reset, 00000001'b ; uart_tx6 reset - bit0
001                                  CONSTANT UART_rx_reset, 00000010'b ; uart_rx6 reset - bit1
001                                  CONSTANT UART_reset, 00000011'b ; reset Tx and Rx
001                                  CONSTANT UART_operate, 00000000'b ; Tx and Rx free to operate
                                     ;
                                     ;
001                                  ;--------------------------------------------------------------------------------------
001                                  ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
001                                  ;--------------------------------------------------------------------------------------
                                     ;
001                                  ; This routine will generate and apply an active High reset pulse to  the FIFO
001                                  ; buffers in both the transmitter and receiver macros.
                                     ;
001                                  ; Note that the reset signals have been assigned to a constant optimised output port
001                                  ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
                                     ;
                                     ;
001               reset_UART_macros:
001                                  ;REMOVED: OUTPUTK UART_reset, reset_UART_port
001                                  ;REMOVED: OUTPUTK UART_operate, reset_UART_port
001                                  ;REMOVED: RETURN
                                     ;
                                     ;
001                                  ;--------------------------------------------------------------------------------------
001                                  ; Routine to send one character to the UART Transmitter 'uart_tx6'
001                                  ;--------------------------------------------------------------------------------------
                                     ;
001                                  ; This routine will transmit the character provided in register 's5'.
                                     ;
001                                  ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
001                                  ; is checked to see if there is space. If the buffer is full then this routine will
001                                  ; wait for space to become available (e.g. the time required for a previous character
001                                  ; to be transmitted by the UART).
                                     ;
001                                  ; Registers used s0 and s5 for the data (which is preserved)
                                     ;
001                         UART_TX:
001  09000                           INPUT s0, UART_status_port     ;Check if buffer is full
002  0D004                           TEST s0, UART_Tx_full
003  36001                           JUMP NZ, UART_TX               ;wait if full
004  2D501                           OUTPUT s5, UART_TX6_output_port
005  25000                           RETURN
                                     ;
                                     ;
006                                  ;--------------------------------------------------------------------------------------
006                                  ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
006                                  ;--------------------------------------------------------------------------------------
                                     ;
006                                  ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
006                                  ; successful, will return that character in register 's5' and the Zero flag will be
006                                  ; reset (Z=0).
                                     ;
006                                  ; If there are no characters available to be read from the FIFO buffer within the
006                                  ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
006                                  ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
006                                  ; cannot become stuck in this routine if no characters are received. If you do want
006                                  ; KCPSM6 to wait indefinitely for a character to be received then either modify this
006                                  ; routine or perform a test of the Zero flag and repeat the call to this routine as
006                                  ; shown in this example...
                                     ;
006                                  ;          wait_for_UART_RX: CALL UART_RX
006                                  ;                            JUMP Z, wait_for_UART_RX
                                     ;
                                     ;
006                                  ; Registers used s0, s1 and s5.
                                     ;
006                         UART_RX:
006  011A7                           LOAD s1, 167'd                 ;Timeout = 167 x (6 instructions x 2 clock cycles)
007                      rx_timeout:
007  09000                           INPUT s0, UART_status_port
008  0D008                           TEST s0, UART_Rx_data_present  ;Z=0 and C=1 when data present
009  3600D                           JUMP NZ, read_Rx
00A  19101                           SUB s1, 1'd
00B  31000                           RETURN Z                       ;Timeout returns with Z=1 and C=0
00C  22007                           JUMP rx_timeout
00D                         read_Rx:
00D  09501                           INPUT s5, UART_RX6_input_port  ;read character from buffer
00E  25000                           RETURN
                                     ;
                                     ;
00F                                  ;------------------------------------------------------------------------------------------
00F                                  ; End of 'uart_interface_routines.psm"'
00F                                  ;------------------------------------------------------------------------------------------
                                     ;


00F                                  ;------------------------------------------------------------------------------------------
00F                                  ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
00F                                  ;------------------------------------------------------------------------------------------
                                     ;
00F                                  ; ANSI Escape Sequences/codes (VT100)
                                     ;
00F                    clear_screen:
00F  0151B                           LOAD s5, ESC                   ;clear terminal sequence
010  20001                           CALL UART_TX
011  0155B                           LOAD s5, "["
012  20001                           CALL UART_TX
013  01532                           LOAD s5, "2"
014  20001                           CALL UART_TX
015  0154A                           LOAD s5, "J"
016  20001                           CALL UART_TX
017  200B1                           CALL delay_1ms                 ;Delay for reliable operation
018  25000                           RETURN
                                     ;
019                     cursor_home:
019  0151B                           LOAD s5, ESC                   ;Send cursor to upper-left of display
01A  20001                           CALL UART_TX
01B  0155B                           LOAD s5, "["
01C  20001                           CALL UART_TX
01D  01548                           LOAD s5, "H"
01E  20001                           CALL UART_TX
01F  200B1                           CALL delay_1ms                 ;Delay for reliable operation
020  25000                           RETURN
                                     ;
                                     ;
021                                  ;------------------------------------------------------------------------------------------
021                                  ; Send Carriage Return to UART
021                                  ;------------------------------------------------------------------------------------------
                                     ;
021                                  ; Registers used s0, s1, s2, and s5.
                                     ;
021                         send_CR:
021  0150D                           LOAD s5, CR
022  22001                           JUMP UART_TX                   ;includes RETURN
                                     ;
                                     ;
023                                  ;------------------------------------------------------------------------------------------
023                                  ; Send New Line to UART
023                                  ;------------------------------------------------------------------------------------------
                                     ;
023                                  ; Registers used s0, s1, s2, and s5.
                                     ;
023                         send_NL:
023  0150A                           LOAD s5, 0x0a
024  22001                           JUMP UART_TX                   ;includes RETURN
025                                  ;------------------------------------------------------------------------------------------
025                                  ; Send a Space to UART
025                                  ;------------------------------------------------------------------------------------------
                                     ;
025                                  ; Registers used s0, s1, s2, and s5.
                                     ;
025                      send_space:
025                                  ;REMOVED: LOAD s5, " "
025                                  ;REMOVED: JUMP UART_TX                   ;includes RETURN
                                     ;
                                     ;
025                                  ;------------------------------------------------------------------------------------------
025                                  ; Send Hex Value of 16-bit word to UART
025                                  ;------------------------------------------------------------------------------------------
                                     ;
025                                  ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
025                                  ; transmitter.
                                     ;
025                                  ; Registers used s0, s1, s2, s4, s5, sA and sB.
                                     ;
025                   send_hex_word:
025                                  ;REMOVED: LOAD s4, sb
025                                  ;REMOVED: CALL send_hex_byte
025                                  ;REMOVED: LOAD s4, sa
025                                  ;REMOVED: JUMP send_hex_byte             ;includes RETURN
                                     ;
                                     ;
025                                  ;------------------------------------------------------------------------------------------
025                                  ; Send Hex Value of Byte to UART
025                                  ;------------------------------------------------------------------------------------------
                                     ;
025                                  ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
                                     ;
025                                  ; Registers used s0, s4 (preserved) and s5.
                                     ;
025                   send_hex_byte:
025  00540                           LOAD s5, s4                    ;isolate upper nibble
026  1450E                           SR0 s5
027  1450E                           SR0 s5
028  1450E                           SR0 s5
029  1450E                           SR0 s5
02A  20031                           CALL hex_to_ASCII              ; convert to ASCII
02B  20001                           CALL UART_TX                   ;send upper digit to UART
02C  00540                           LOAD s5, s4                    ;isolate lower nibble
02D  0350F                           AND s5, 0F
02E  20031                           CALL hex_to_ASCII              ; convert to ASCII
02F  20001                           CALL UART_TX                   ;send lower digit to UART
030  25000                           RETURN
                                     ;
031                                  ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
                                     ;
031                                  ; Register used s5
                                     ;
031                    hex_to_ASCII:
031  1950A                           SUB s5, 0A                     ;test if value is in range 0 to 9
032  3A034                           JUMP C, number_char
033  11507                           ADD s5, 07                     ;ASCII char A to F in range 41 to 46
034                     number_char:
034  1153A                           ADD s5, 3A                     ;ASCII char 0 to 9 in range 30 to 40
035  25000                           RETURN
                                     ;
                                     ;
036                                  ;------------------------------------------------------------------------------------------
036                                  ; Converts character to upper case
036                                  ;------------------------------------------------------------------------------------------
                                     ;
036                                  ; Tests and converts character in 's5' (if necessary).
                                     ;
036                                  ; To convert character to upper case
                                     ;
036                                  ; If the character is in the range 'a' to 'z', it is converted
036                                  ; to the equivalent upper case character in the range 'A' to 'Z'.
036                                  ; All other characters remain unchanged.
                                     ;
036                      upper_case:
036  1D561                           COMPARE s5, "a"                ;eliminate character codes below 'a' (61 hex)
037  39000                           RETURN C
038  1D57B                           COMPARE s5, 7B                 ;eliminate character codes above 'z' (7A hex)
039  3D000                           RETURN NC
03A  035DF                           AND s5, 11011111'b             ;force bit5 Low to convert to upper case
03B  25000                           RETURN
                                     ;
                                     ;
03C                                  ;------------------------------------------------------------------------------------------
03C                                  ; Convert ASCII character to an equivalent HEX value.
03C                                  ;------------------------------------------------------------------------------------------
                                     ;
03C                                  ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
03C                                  ; If character is not valid for hex, then CARRY is set on return.
                                     ;
03C                                  ; Register used s5
                                     ;
03C                    ASCII_to_hex:
03C  115B9                           ADD s5, B9                     ;test for above ASCII code 46 ('F')
03D  39000                           RETURN C
03E  195E9                           SUB s5, E9                     ;normalise 0 to 9 with A-F in 11 to 16 hex
03F  39000                           RETURN C                       ;reject below ASCII code 30 ('0')
040  19511                           SUB s5, 11                     ;isolate A-F down to 00 to 05 hex
041  3E046                           JUMP NC, ASCII_letter
042  11507                           ADD s5, 07                     ;test for above ASCII code 46 ('F')
043  39000                           RETURN C
044  195F6                           SUB s5, F6                     ;convert to range 00 to 09
045  25000                           RETURN
046  1150A             ASCII_letter: ADD s5, 0A                     ;convert to range 0A to 0F
047  25000                           RETURN
                                     ;
                                     ;
048                                  ;------------------------------------------------------------------------------------------
048                                  ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
048                                  ;------------------------------------------------------------------------------------------
                                     ;
048                                  ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
048                                  ; register set. The number of characters to be read must be defined in sE. When less than
048                                  ; 8 characters are read the value is returned in the least significant bits of the register
048                                  ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
048                                  ; nibble will be zero if an odd number of digits are read.
                                     ;
048                                  ; If any character received from the UART is not in the range 0 to F then the routine will
048                                  ; end immediately with the CARRY flag set and this should be checked by the calling process
048                                  ; upon return.
                                     ;
048                    obtain_value:
048  01A00                           LOAD sa, 00                    ;initialise potentially unused bits to zero
049                    obtain_digit:
049  20006                           CALL UART_RX                   ;wait for a character and return in s5
04A  32049                           JUMP Z, obtain_digit           ;continue to wait if timeout occurs
04B  20001                           CALL UART_TX                   ;echo character as entered
04C  20036                           CALL upper_case                ;convert to upper case if necessary
04D  2003C                           CALL ASCII_to_hex              ;convert value in s5 to hex nibble
04E  39000                           RETURN C                       ;If invalid hex digit then return immediately
04F  01004                           LOAD s0, 4'd                   ;shift [sD,sC,sB,sA] left by 4 bits
050                     build_value:
050  14A06                           SL0 sa                         ;  to make space for new digit value
051  14B00                           SLA sb
052  14C00                           SLA sc
053  14D00                           SLA sd
054  19001                           SUB s0, 1'd
055  36050                           JUMP NZ, build_value
056  04A50                           OR sa, s5                      ;merge value of new digit into existing value
057  19E01                           SUB se, 01                     ;count number of digits obtained
058  36049                           JUMP NZ, obtain_digit
059  25000                           RETURN
                                     ;
                                     ;
05A                                  ;------------------------------------------------------------------------------------------
05A                                  ; Send integer in decimal format to UART Tx
05A                                  ;------------------------------------------------------------------------------------------
                                     ;
05A                                  ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
05A                                  ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
                                     ;
                                     ;
05A                    send_integer:
05A                                  ;REMOVED: COMPARE s2, 00                 ;test for special case of zero
05A                                  ;REMOVED: COMPARECY s3, 00
05A                                  ;REMOVED: JUMP Z, zero_integer
05A                                  ;REMOVED: CALL integer16_to_BCD          ;Convert to BCD in SPM
05A                                  ;REMOVED: LOAD sa, decimal4              ;pointer to BCD in SPM
05A                                  ;REMOVED: LOAD sb, 0'd                   ;flag for leading zero blanking
05A               send_integer_loop:
05A                                  ;REMOVED: FETCH s5, (sa)
05A                                  ;REMOVED: ADD sb, s5                     ;make sB non-zero to stop blanking
05A                                  ;REMOVED: COMPARE sb, 0'd                ;Test for blanking
05A                                  ;REMOVED: JUMP Z, next_int_digit
05A                                  ;REMOVED: ADD s5, "0"                    ;convert to ASCII
05A                                  ;REMOVED: CALL UART_TX                   ;send digit
05A                  next_int_digit:
05A                                  ;REMOVED: COMPARE sa, decimal0
05A                                  ;REMOVED: RETURN Z
05A                                  ;REMOVED: SUB sa, 1'd                    ;move pointer to next digit
05A                                  ;REMOVED: JUMP send_integer_loop
05A                    zero_integer:
05A                                  ;REMOVED: LOAD s5, "0"                   ;special response for zero
05A                                  ;REMOVED: CALL UART_TX
05A                                  ;REMOVED: RETURN
                                     ;
                                     ;
05A                                  ;------------------------------------------------------------------------------------------
05A                                  ; 16-bit integer to BCD conversion
05A                                  ;------------------------------------------------------------------------------------------
                                     ;
05A                                  ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
05A                                  ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
05A                                  ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
                                     ;
05A                                  ; Each digit is formed in turn starting with the least significant. The value
05A                                  ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
05A                                  ; is the value of each digit in the range 0 to 9.
                                     ;
05A                                  ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
                                     ;
05A                integer16_to_BCD:
05A                                  ;REMOVED: LOAD s4, decimal0              ;pointer for LS-Digit in scratch pad memory
05A                 int_to_BCD_loop:
05A                                  ;REMOVED: CALL divide_16bit_by_10
05A                                  ;REMOVED: STORE sa, (s4)                 ;remainder is the digit value
05A                                  ;REMOVED: COMPARE s4, decimal4           ;test for MS-Digit completed
05A                                  ;REMOVED: RETURN Z
05A                                  ;REMOVED: ADD s4, 1'd                    ;advance pointer to next digit
05A                                  ;REMOVED: JUMP int_to_BCD_loop
                                     ;
05A                                  ; Divide 16-bit binary integer by 10
                                     ;
05A                                  ; The value to be divided by 10 should be provided in register set [s3,s2].
05A                                  ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
05A                                  ; with any remainder in (0 to 9) in register sA.
                                     ;
05A                                  ; Registers used s0,s2,s3,s8,s9,sA,sB
                                     ;
05A              divide_16bit_by_10:
05A                                  ;REMOVED: LOAD sa, s2                    ;copy input value into [sB,sA]
05A                                  ;REMOVED: LOAD sb, s3
05A                                  ;REMOVED: LOAD s2, 00                    ;clear division result
05A                                  ;REMOVED: LOAD s3, 00
05A                                  ;REMOVED: LOAD s9, A0                    ;initialise [s9,s8] with '10' in MSBs
05A                                  ;REMOVED: LOAD s8, 00
05A                                  ;REMOVED: LOAD s0, 13'd                  ;13 subtract and shift iterations to be performed
05A                      div10_loop:
05A                                  ;REMOVED: SUB sa, s8                     ;perform 16-bit subtract [sB,sA]-[s9,s8]
05A                                  ;REMOVED: SUBCY sb, s9
05A                                  ;REMOVED: JUMP C, div10_restore          ;if carry then could not subtract from total
05A                                  ;REMOVED: SL1 s2                         ;shift '1' into result because subtract ok
05A                                  ;REMOVED: JUMP div10_shifts
05A                   div10_restore:
05A                                  ;REMOVED: ADD sa, s8                     ;perform 16-bit addition [sB,sA]+[s9,s8]
05A                                  ;REMOVED: ADDCY sb, s9                   ;to restore total
05A                                  ;REMOVED: SL0 s2                         ;shift '0' into result because could no subtract
05A                    div10_shifts:
05A                                  ;REMOVED: SLA s3                         ;complete 16-bit shift left into [s3,s2]
05A                                  ;REMOVED: SR0 s9                         ;divide '10' value by 2 (shift right 1 place)
05A                                  ;REMOVED: SRA s8
05A                                  ;REMOVED: SUB s0, 01                     ;count iterations
05A                                  ;REMOVED: RETURN Z                       ;on return the remainder of division is in sA
05A                                  ;REMOVED: JUMP div10_loop

05A                                  ;;  return received char in s5
05A                                  ;;  echo the received char
05A                     obtain_char:
05A  20006                           CALL UART_RX
05B  3205A                           JUMP z, obtain_char
05C  20001                           CALL UART_TX
05D  25000                           RETURN




05E                    send_message:
05E  24BA0                           CALL@ (sb, sa)
05F  1D500                           COMPARE s5, 00                 ;terminate on NUL character
060  31000                           RETURN Z
061  20001                           CALL UART_TX
062  11A01                           ADD sa, 1'd
063  13B00                           ADDCY sb, 0'd
064  2205E                           JUMP send_message

065                     send_64_bit:
065  0B403                           FETCH s4, Saved_Byte3
066  20025                           CALL send_hex_byte
067  0B402                           FETCH s4, Saved_Byte2
068  20025                           CALL send_hex_byte
069  0B401                           FETCH s4, Saved_Byte1
06A  20025                           CALL send_hex_byte
06B  0B400                           FETCH s4, Saved_Byte0
06C  20025                           CALL send_hex_byte
06D  0B407                           FETCH s4, Saved_Byte7
06E  20025                           CALL send_hex_byte
06F  0B406                           FETCH s4, Saved_Byte6
070  20025                           CALL send_hex_byte
071  0B405                           FETCH s4, Saved_Byte5
072  20025                           CALL send_hex_byte
073  0B404                           FETCH s4, Saved_Byte4
074  20025                           CALL send_hex_byte
075  25000                           RETURN

076                     send_32_bit:
076  0B403                           FETCH s4, Saved_Byte3
077  20025                           CALL send_hex_byte
078  0B402                           FETCH s4, Saved_Byte2
079  20025                           CALL send_hex_byte
07A  0B401                           FETCH s4, Saved_Byte1
07B  20025                           CALL send_hex_byte
07C  0B400                           FETCH s4, Saved_Byte0
07D  20025                           CALL send_hex_byte
07E  25000                           RETURN


07F                                  CONSTANT SPI_output_port, 04   ; Write controls and data to SPI Flash Memory
07F                                  CONSTANT SPI_data_in_port, 03  ; Read serial data from SPI Flash
07F                                  CONSTANT spi_clk, 00000001'b   ;   spi_clk - bit0 (SPI_output_port)
07F                                  CONSTANT spi_clk_n, 11111110'b ;   spi_clk - bit0 (SPI_output_port)
07F                                  CONSTANT spi_cs_b, 00000010'b  ;  spi_cs_b - bit1 (SPI_output_port)
07F                                  CONSTANT spi_cs, 00000000'b    ;  spi_cs     - bit1 (SPI_output_port)
07F                                  CONSTANT spi_mosi, 10000000'b  ;  spi_mosi - bit7 (SPI_output_port)
07F                                  CONSTANT spi_mosi_n, 01111111'b ;  spi_mosi - bit7 (SPI_output_port)
07F                                  CONSTANT spi_miso, 10000000'b  ;  spi_miso - bit7 (SPI_data_in_port)

07F                     SPI_disable:
07F  05002                           OR s0, spi_cs_b
080  2D004                           OUTPUT s0, SPI_output_port
081  25000                           RETURN

082                      SPI_enable:
082  03000                           AND s0, spi_cs
083  2D004                           OUTPUT s0, SPI_output_port
084  25000                           RETURN
                                     ;
                                     ;
085                                  ;--------------------------------------------------------------------------------------
085                                  ; Routine to Transmit and Receive One Byte
085                                  ;--------------------------------------------------------------------------------------
                                     ;
085                                  ; SPI communication is full duplex meaning that data can be simultaneously transmitted
085                                  ; and received but in practice this capability is not widely exploited. As such, this
085                                  ; routine will often be invoked only to transmit a byte or only to receive a byte; the
085                                  ; fact that it actually always does both at the same time is generally ignored!
                                     ;
085                                  ; This routine will be invoked as part of a complete transaction so the 'SPI_disable'
085                                  ; routine should have been used at some point prior to this routine being called and
085                                  ; therefore the states of the SPI signals and 's0' register contents are known. This
085                                  ; routine will always drive the 'spi_cs_b' signal Low to enable communication to take
085                                  ; place with the one slave device so there is no requirement to specifically enable
085                                  ; the N25Q128 device at the start of a transaction but it will be necessary to
085                                  ; disable it at the end.
                                     ;
085                                  ; The instruction, address or data to be transmitted should be supplied in register
085                                  ; 's2' and any received information will be returned in 's2' when the routine completes.
                                     ;
085                                  ; The transmission and reception of each bit with an associated 'spi_clk' pulse
085                                  ; is implemented by 14 instructions that take 28 clock cycles to execute. Hence the
085                                  ; serial data rate is the KCPSM6 clock frequency divided by 24 (e.g. 3.57 Mbit/s with a
085                                  ; 100MHz clock ). This is generally a much lower data rate than an SPI device can
085                                  ; support so no special timing considerations are required. For higher data rates a
085                                  ; hardware peripheral consisting of a shift register and pulse generator should be
085                                  ; investigated.
                                     ;
085                                  ; As a KCPSM6 is the SPI master the signal sequence implemented is as follows..
                                     ;
085                                  ;   Receive data bit from spi_miso line (Flash transmits on previous falling edge)
085                                  ;   Transmit data bit on spi_mosi line (data set up before rising edge of spi_clk)
085                                  ;   Drive spi_clk transition from low to high (Flash captures data bit)
085                                  ;   Drive spi_clk transition from high to low (Flash outputs next data bit)
                                     ;
085                 SPI_FLASH_tx_rx:
085                                  ;REMOVED: LOAD s1, 32                    ;8-bits to transmit and receive
085              next_SPI_FLASH_bit:
085                                  ;REMOVED: LOAD s0, s2                    ;prepare next bit to transmit
085                                  ;REMOVED: AND s0, spi_mosi               ;isolates data bit and spi_cs_b = 0
085                                  ;REMOVED: OUTPUT s0, SPI_output_port     ;output data bit ready to be used on rising clock edge
085                                  ;REMOVED: INPUT s3, SPI_data_in_port     ;read input bit
085                                  ;REMOVED: TEST s3, spi_miso              ;carry flag becomes value of received bit
085                                  ;REMOVED: SLA s2                         ;shift new data into result and move to next transmit bit
085                                  ;REMOVED: CALL SPI_clock_pulse           ;pulse spi_clk High
085                                  ;REMOVED: SUB s1, 01                     ;count bits
085                                  ;REMOVED: JUMP NZ, next_SPI_FLASH_bit    ;repeat until last bit
085                                  ;REMOVED: RETURN                         ;
                                     ;
085                                  ;--------------------------------------------------------------------------------------
085                                  ; Routine to Generate One 'spi_clk' Pulse
085                                  ;--------------------------------------------------------------------------------------
                                     ;
085                                  ; This routine will generate one positive pulse on the 'spi_clk' line.
                                     ;
085                                  ; Register 's0' is used and bit1 and bit7 must previously define the required states
085                                  ; of 'spi_cs_b' and 'spi_mosi' which will remain unchanged.
                                     ;
085                 SPI_clock_pulse:
085                                  ;REMOVED: OR s0, spi_clk                 ;clock High (bit0)
085                                  ;REMOVED: OUTPUT s0, SPI_output_port     ;drive clock High
085                                  ;REMOVED: AND s0, ~spi_clk               ;clock Low (bit0)
085                                  ;REMOVED: OUTPUT s0, SPI_output_port     ;drive clock Low
085                                  ;REMOVED: RETURN
                                     ;
                                     ;
085                                  ;; data to shift out must be loaded into sA, sB, sC, sD
085                SPI_32_bit_tx_rx:
085                                  ;; first register:
085                                  ;; shift out sA
085  01121                           LOAD s1, 0x21
086                        spi_loop:
086  19101                           SUB s1, 1
087  320B0                           JUMP Z, end_spi_routine
088  14A06                           SL0 sa
089  14B00                           SLA sb
08A  14C00                           SLA sc
08B  14D00                           SLA sd
08C  3A09A                           JUMP C, send_one
08D                       send_zero:
08D  05001                           OR s0, spi_clk                 ; rising edge
08E  0307F                           AND s0, spi_mosi_n             ; set to zero mosi bit
08F  2D004                           OUTPUT s0, SPI_output_port     ;
090                                  ;;; half period delay
090  20092                           CALL DTREE_f3_0001_2           ; Delay for 9 cycles
091  22095                           JUMP DTREE_f3_0001_end
092  20093          DTREE_f3_0001_2: CALL DTREE_f3_0001_1
093  20094          DTREE_f3_0001_1: CALL DTREE_f3_0001_0
094  25000          DTREE_f3_0001_0: RETURN
095               DTREE_f3_0001_end:
095  00EE0                           LOAD se, se                    ; NOP

096  030FE                           AND s0, spi_clk_n              ; falling edge
097  2D004                           OUTPUT s0, SPI_output_port     ;
098  09303                           INPUT s3, SPI_data_in_port     ; capture from slave sdo
099  220A7                           JUMP capture_miso
09A                        send_one:
09A  05001                           OR s0, spi_clk                 ; rising edge
09B  05080                           OR s0, spi_mosi                ; set to one the mosi bit
09C  2D004                           OUTPUT s0, SPI_output_port     ;
09D                                  ;; half period delay
09D  2009F                           CALL DTREE_f3_0002_2           ; Delay for 9 cycles
09E  220A2                           JUMP DTREE_f3_0002_end
09F  200A0          DTREE_f3_0002_2: CALL DTREE_f3_0002_1
0A0  200A1          DTREE_f3_0002_1: CALL DTREE_f3_0002_0
0A1  25000          DTREE_f3_0002_0: RETURN
0A2               DTREE_f3_0002_end:
0A2  00EE0                           LOAD se, se                    ; NOP

0A3  030FE                           AND s0, spi_clk_n              ; falling edge
0A4  2D004                           OUTPUT s0, SPI_output_port     ;
0A5  09303                           INPUT s3, SPI_data_in_port     ; capture from slave sdo
0A6  030FE                           AND s0, spi_clk_n              ; falling edge
0A7                    capture_miso:
0A7  1430E                           SR0 s3
0A8  1430E                           SR0 s3
0A9  1430E                           SR0 s3
0AA  1430E                           SR0 s3
0AB  1430E                           SR0 s3
0AC  1430E                           SR0 s3
0AD  1430E                           SR0 s3

0AE  04A30                           OR sa, s3
0AF  22086                           JUMP spi_loop
0B0                 end_spi_routine:
0B0  25000                           RETURN


0B1                       delay_1ms:
0B1  01200                           LOAD s2, 00
0B2  01118                           LOAD s1, 18
0B3  0106A                           LOAD s0, 6A
0B4  220B9                           JUMP software_delay
                                     ;
0B5                                  ;20ms is 1,000,000 clock cycles requiring 125,000 delay iterations
                                     ;
0B5                      delay_20ms:
0B5                                  ;REMOVED: LOAD s2, 01
0B5                                  ;REMOVED: LOAD s1, E8
0B5                                  ;REMOVED: LOAD s0, 48
0B5                                  ;REMOVED: JUMP software_delay
                                     ;
0B5                                  ;1s is 50,000,000 clock cycles requiring 6,250,000 delay iterations
                                     ;
0B5                        delay_1s:
0B5  0125F                           LOAD s2, 5F
0B6  0115E                           LOAD s1, 5E
0B7  01010                           LOAD s0, 10
0B8  220B9                           JUMP software_delay
                                     ;
0B9                                  ; The delay loop decrements [s2,s1,s0] until it reaches zero
0B9                                  ; Each decrement cycle is 4 instructions which is 8 clock cycles (160ns at 50MHz)
                                     ;
0B9                  software_delay:
0B9  19001                           SUB s0, 1'd
0BA  1B100                           SUBCY s1, 0'd
0BB  1B200                           SUBCY s2, 0'd
0BC  360B9                           JUMP NZ, software_delay
0BD  25000                           RETURN


0BE                                  ;;  Scratch pad definition
0BE                                  CONSTANT Saved_Byte0, 00
0BE                                  CONSTANT Saved_Byte1, 01
0BE                                  CONSTANT Saved_Byte2, 02
0BE                                  CONSTANT Saved_Byte3, 03
0BE                                  CONSTANT Saved_Byte4, 04
0BE                                  CONSTANT Saved_Byte5, 05
0BE                                  CONSTANT Saved_Byte6, 06
0BE                                  CONSTANT Saved_Byte7, 07

0BE             store_reg_in_first_slot:
0BE  2FD03                           STORE sd, Saved_Byte3
0BF  2FC02                           STORE sc, Saved_Byte2
0C0  2FB01                           STORE sb, Saved_Byte1
0C1  2FA00                           STORE sa, Saved_Byte0
0C2  25000                           RETURN

0C3             store_reg_in_second_slot:
0C3  2FD07                           STORE sd, Saved_Byte7
0C4  2FC06                           STORE sc, Saved_Byte6
0C5  2FB05                           STORE sb, Saved_Byte5
0C6  2FA04                           STORE sa, Saved_Byte4
0C7  25000                           RETURN

0C8             fetch_reg_in_first_slot:
0C8  0BD03                           FETCH sd, Saved_Byte3
0C9  0BC02                           FETCH sc, Saved_Byte2
0CA  0BB01                           FETCH sb, Saved_Byte1
0CB  0BA00                           FETCH sa, Saved_Byte0
0CC  25000                           RETURN

0CD             fetch_reg_in_second_slot:
0CD  0BD07                           FETCH sd, Saved_Byte7
0CE  0BC06                           FETCH sc, Saved_Byte6
0CF  0BB05                           FETCH sb, Saved_Byte5
0D0  0BA04                           FETCH sa, Saved_Byte4
0D1  25000                           RETURN

0D2                      sja_config:
0D2  20082                           CALL SPI_enable
0D3  20593                           CALL delay_60

0D4  01D80                           LOAD sd, 80
0D5  01C20                           LOAD sc, 20
0D6  01B00                           LOAD sb, 00
0D7  01A00                           LOAD sa, 00
0D8  20085                           CALL SPI_32_bit_tx_rx
0D9  20593                           CALL delay_60
0DA  01D9E                           LOAD sd, 9e
0DB  01C00                           LOAD sc, 00
0DC  01B03                           LOAD sb, 03
0DD  01A0E                           LOAD sa, 0e
0DE  20085                           CALL SPI_32_bit_tx_rx
0DF  20593                           CALL delay_60
0E0  01D06                           LOAD sd, 06
0E1  01C00                           LOAD sc, 00
0E2  01B00                           LOAD sb, 00
0E3  01A00                           LOAD sa, 00
0E4  20085                           CALL SPI_32_bit_tx_rx
0E5  20593                           CALL delay_60
0E6  01D00                           LOAD sd, 00
0E7  01C00                           LOAD sc, 00
0E8  01B00                           LOAD sb, 00
0E9  01A50                           LOAD sa, 50
0EA  20085                           CALL SPI_32_bit_tx_rx
0EB  20593                           CALL delay_60
0EC  01D21                           LOAD sd, 21
0ED  01C6F                           LOAD sc, 6f
0EE  01B25                           LOAD sb, 25
0EF  01A6B                           LOAD sa, 6b
0F0  20085                           CALL SPI_32_bit_tx_rx
0F1  20593                           CALL delay_60
0F2  01DFE                           LOAD sd, fe
0F3  01CF7                           LOAD sc, f7
0F4  01B00                           LOAD sb, 00
0F5  01A00                           LOAD sa, 00
0F6  20085                           CALL SPI_32_bit_tx_rx
0F7  20593                           CALL delay_60
0F8  01D03                           LOAD sd, 03
0F9  01CFF                           LOAD sc, ff
0FA  01BFF                           LOAD sb, ff
0FB  01AFF                           LOAD sa, ff
0FC  20085                           CALL SPI_32_bit_tx_rx
0FD  20593                           CALL delay_60
0FE  01DFE                           LOAD sd, fe
0FF  01CF7                           LOAD sc, f7
100  01B00                           LOAD sb, 00
101  01A00                           LOAD sa, 00
102  20085                           CALL SPI_32_bit_tx_rx
103  20593                           CALL delay_60
104  01D03                           LOAD sd, 03
105  01CFF                           LOAD sc, ff
106  01BFF                           LOAD sb, ff
107  01AFF                           LOAD sa, ff
108  20085                           CALL SPI_32_bit_tx_rx
109  20593                           CALL delay_60
10A  01DFE                           LOAD sd, fe
10B  01CF7                           LOAD sc, f7
10C  01B00                           LOAD sb, 00
10D  01A00                           LOAD sa, 00
10E  20085                           CALL SPI_32_bit_tx_rx
10F  20593                           CALL delay_60
110  01D03                           LOAD sd, 03
111  01CFF                           LOAD sc, ff
112  01BFF                           LOAD sb, ff
113  01AFF                           LOAD sa, ff
114  20085                           CALL SPI_32_bit_tx_rx
115  20593                           CALL delay_60
116  01DFE                           LOAD sd, fe
117  01CF7                           LOAD sc, f7
118  01B00                           LOAD sb, 00
119  01A00                           LOAD sa, 00
11A  20085                           CALL SPI_32_bit_tx_rx
11B  20593                           CALL delay_60
11C  01D03                           LOAD sd, 03
11D  01CFF                           LOAD sc, ff
11E  01BFF                           LOAD sb, ff
11F  01AFF                           LOAD sa, ff
120  20085                           CALL SPI_32_bit_tx_rx
121  20593                           CALL delay_60
122  01DFE                           LOAD sd, fe
123  01CF7                           LOAD sc, f7
124  01B00                           LOAD sb, 00
125  01A00                           LOAD sa, 00
126  20085                           CALL SPI_32_bit_tx_rx
127  20593                           CALL delay_60
128  01D03                           LOAD sd, 03
129  01CFF                           LOAD sc, ff
12A  01BFF                           LOAD sb, ff
12B  01AFF                           LOAD sa, ff
12C  20085                           CALL SPI_32_bit_tx_rx
12D  20593                           CALL delay_60
12E  01DFE                           LOAD sd, fe
12F  01CF7                           LOAD sc, f7
130  01B00                           LOAD sb, 00
131  01A00                           LOAD sa, 00
132  20085                           CALL SPI_32_bit_tx_rx
133  20593                           CALL delay_60
134  01D03                           LOAD sd, 03
135  01CFF                           LOAD sc, ff
136  01BFF                           LOAD sb, ff
137  01AFF                           LOAD sa, ff
138  20085                           CALL SPI_32_bit_tx_rx
139  20593                           CALL delay_60
13A  01DFE                           LOAD sd, fe
13B  01CF7                           LOAD sc, f7
13C  01B00                           LOAD sb, 00
13D  01A00                           LOAD sa, 00
13E  20085                           CALL SPI_32_bit_tx_rx
13F  20593                           CALL delay_60
140  01D03                           LOAD sd, 03
141  01CFF                           LOAD sc, ff
142  01BFF                           LOAD sb, ff
143  01AFF                           LOAD sa, ff
144  20085                           CALL SPI_32_bit_tx_rx
145  20593                           CALL delay_60
146  01DFE                           LOAD sd, fe
147  01CF7                           LOAD sc, f7
148  01B00                           LOAD sb, 00
149  01A00                           LOAD sa, 00
14A  20085                           CALL SPI_32_bit_tx_rx
14B  20593                           CALL delay_60
14C  01D03                           LOAD sd, 03
14D  01CFF                           LOAD sc, ff
14E  01BFF                           LOAD sb, ff
14F  01AFF                           LOAD sa, ff
150  20085                           CALL SPI_32_bit_tx_rx
151  20593                           CALL delay_60
152  01DFE                           LOAD sd, fe
153  01CF7                           LOAD sc, f7
154  01B00                           LOAD sb, 00
155  01A00                           LOAD sa, 00
156  20085                           CALL SPI_32_bit_tx_rx
157  20593                           CALL delay_60
158  01D07                           LOAD sd, 07
159  01CFF                           LOAD sc, ff
15A  01BFF                           LOAD sb, ff
15B  01AFF                           LOAD sa, ff
15C  20085                           CALL SPI_32_bit_tx_rx
15D  20593                           CALL delay_60
15E  01DFE                           LOAD sd, fe
15F  01CF7                           LOAD sc, f7
160  01B00                           LOAD sb, 00
161  01A00                           LOAD sa, 00
162  20085                           CALL SPI_32_bit_tx_rx
163  20593                           CALL delay_60
164  01D07                           LOAD sd, 07
165  01CFF                           LOAD sc, ff
166  01BFF                           LOAD sb, ff
167  01AFF                           LOAD sa, ff
168  20085                           CALL SPI_32_bit_tx_rx
169  20593                           CALL delay_60
16A  01DFE                           LOAD sd, fe
16B  01CF7                           LOAD sc, f7
16C  01B00                           LOAD sb, 00
16D  01A00                           LOAD sa, 00
16E  20085                           CALL SPI_32_bit_tx_rx
16F  20593                           CALL delay_60
170  01D07                           LOAD sd, 07
171  01CFF                           LOAD sc, ff
172  01BFF                           LOAD sb, ff
173  01AFF                           LOAD sa, ff
174  20085                           CALL SPI_32_bit_tx_rx
175  20593                           CALL delay_60
176  01DFE                           LOAD sd, fe
177  01CF7                           LOAD sc, f7
178  01B00                           LOAD sb, 00
179  01A00                           LOAD sa, 00
17A  20085                           CALL SPI_32_bit_tx_rx
17B  20593                           CALL delay_60
17C  01D07                           LOAD sd, 07
17D  01CFF                           LOAD sc, ff
17E  01BFF                           LOAD sb, ff
17F  01AFF                           LOAD sa, ff
180  20085                           CALL SPI_32_bit_tx_rx
181  20593                           CALL delay_60
182  01DFE                           LOAD sd, fe
183  01CF7                           LOAD sc, f7
184  01B00                           LOAD sb, 00
185  01A00                           LOAD sa, 00
186  20085                           CALL SPI_32_bit_tx_rx
187  20593                           CALL delay_60
188  01D07                           LOAD sd, 07
189  01CFF                           LOAD sc, ff
18A  01BFF                           LOAD sb, ff
18B  01AFF                           LOAD sa, ff
18C  20085                           CALL SPI_32_bit_tx_rx
18D  20593                           CALL delay_60
18E  01DFE                           LOAD sd, fe
18F  01CF7                           LOAD sc, f7
190  01B00                           LOAD sb, 00
191  01A00                           LOAD sa, 00
192  20085                           CALL SPI_32_bit_tx_rx
193  20593                           CALL delay_60
194  01D07                           LOAD sd, 07
195  01CFF                           LOAD sc, ff
196  01BFF                           LOAD sb, ff
197  01AFF                           LOAD sa, ff
198  20085                           CALL SPI_32_bit_tx_rx
199  20593                           CALL delay_60
19A  01DFE                           LOAD sd, fe
19B  01CF7                           LOAD sc, f7
19C  01B00                           LOAD sb, 00
19D  01A00                           LOAD sa, 00
19E  20085                           CALL SPI_32_bit_tx_rx
19F  20593                           CALL delay_60
1A0  01D07                           LOAD sd, 07
1A1  01CFF                           LOAD sc, ff
1A2  01BFF                           LOAD sb, ff
1A3  01AFF                           LOAD sa, ff
1A4  20085                           CALL SPI_32_bit_tx_rx
1A5  20593                           CALL delay_60
1A6  01DFE                           LOAD sd, fe
1A7  01CF7                           LOAD sc, f7
1A8  01B00                           LOAD sb, 00
1A9  01A00                           LOAD sa, 00
1AA  20085                           CALL SPI_32_bit_tx_rx
1AB  20593                           CALL delay_60
1AC  01D07                           LOAD sd, 07
1AD  01CFF                           LOAD sc, ff
1AE  01BFF                           LOAD sb, ff
1AF  01AFF                           LOAD sa, ff
1B0  20085                           CALL SPI_32_bit_tx_rx
1B1  20593                           CALL delay_60
1B2  01DFE                           LOAD sd, fe
1B3  01CF7                           LOAD sc, f7
1B4  01B00                           LOAD sb, 00
1B5  01A00                           LOAD sa, 00
1B6  20085                           CALL SPI_32_bit_tx_rx
1B7  20593                           CALL delay_60
1B8  01D0B                           LOAD sd, 0b
1B9  01CFF                           LOAD sc, ff
1BA  01BFF                           LOAD sb, ff
1BB  01AFF                           LOAD sa, ff
1BC  20085                           CALL SPI_32_bit_tx_rx
1BD  20593                           CALL delay_60
1BE  01DFE                           LOAD sd, fe
1BF  01CF7                           LOAD sc, f7
1C0  01B00                           LOAD sb, 00
1C1  01A00                           LOAD sa, 00
1C2  20085                           CALL SPI_32_bit_tx_rx
1C3  20593                           CALL delay_60
1C4  01D0B                           LOAD sd, 0b
1C5  01CFF                           LOAD sc, ff
1C6  01BFF                           LOAD sb, ff
1C7  01AFF                           LOAD sa, ff
1C8  20085                           CALL SPI_32_bit_tx_rx
1C9  20593                           CALL delay_60
1CA  01DFE                           LOAD sd, fe
1CB  01CF7                           LOAD sc, f7
1CC  01B00                           LOAD sb, 00
1CD  01A00                           LOAD sa, 00
1CE  20085                           CALL SPI_32_bit_tx_rx
1CF  20593                           CALL delay_60
1D0  01D0B                           LOAD sd, 0b
1D1  01CFF                           LOAD sc, ff
1D2  01BFF                           LOAD sb, ff
1D3  01AFF                           LOAD sa, ff
1D4  20085                           CALL SPI_32_bit_tx_rx
1D5  20593                           CALL delay_60
1D6  01DFE                           LOAD sd, fe
1D7  01CF7                           LOAD sc, f7
1D8  01B00                           LOAD sb, 00
1D9  01A00                           LOAD sa, 00
1DA  20085                           CALL SPI_32_bit_tx_rx
1DB  20593                           CALL delay_60
1DC  01D0B                           LOAD sd, 0b
1DD  01CFF                           LOAD sc, ff
1DE  01BFF                           LOAD sb, ff
1DF  01AFF                           LOAD sa, ff
1E0  20085                           CALL SPI_32_bit_tx_rx
1E1  20593                           CALL delay_60
1E2  01DFE                           LOAD sd, fe
1E3  01CF7                           LOAD sc, f7
1E4  01B00                           LOAD sb, 00
1E5  01A00                           LOAD sa, 00
1E6  20085                           CALL SPI_32_bit_tx_rx
1E7  20593                           CALL delay_60
1E8  01D0B                           LOAD sd, 0b
1E9  01CFF                           LOAD sc, ff
1EA  01BFF                           LOAD sb, ff
1EB  01AFF                           LOAD sa, ff
1EC  20085                           CALL SPI_32_bit_tx_rx
1ED  20593                           CALL delay_60
1EE  01DFE                           LOAD sd, fe
1EF  01CF7                           LOAD sc, f7
1F0  01B00                           LOAD sb, 00
1F1  01A00                           LOAD sa, 00
1F2  20085                           CALL SPI_32_bit_tx_rx
1F3  20593                           CALL delay_60
1F4  01D0B                           LOAD sd, 0b
1F5  01CFF                           LOAD sc, ff
1F6  01BFF                           LOAD sb, ff
1F7  01AFF                           LOAD sa, ff
1F8  20085                           CALL SPI_32_bit_tx_rx
1F9  20593                           CALL delay_60
1FA  01DFE                           LOAD sd, fe
1FB  01CF7                           LOAD sc, f7
1FC  01B00                           LOAD sb, 00
1FD  01A00                           LOAD sa, 00
1FE  20085                           CALL SPI_32_bit_tx_rx
1FF  20593                           CALL delay_60
200  01D0B                           LOAD sd, 0b
201  01CFF                           LOAD sc, ff
202  01BFF                           LOAD sb, ff
203  01AFF                           LOAD sa, ff
204  20085                           CALL SPI_32_bit_tx_rx
205  20593                           CALL delay_60
206  01DFE                           LOAD sd, fe
207  01CF7                           LOAD sc, f7
208  01B00                           LOAD sb, 00
209  01A00                           LOAD sa, 00
20A  20085                           CALL SPI_32_bit_tx_rx
20B  20593                           CALL delay_60
20C  01D0B                           LOAD sd, 0b
20D  01CFF                           LOAD sc, ff
20E  01BFF                           LOAD sb, ff
20F  01AFF                           LOAD sa, ff
210  20085                           CALL SPI_32_bit_tx_rx
211  20593                           CALL delay_60
212  01DFE                           LOAD sd, fe
213  01CF7                           LOAD sc, f7
214  01B00                           LOAD sb, 00
215  01A00                           LOAD sa, 00
216  20085                           CALL SPI_32_bit_tx_rx
217  20593                           CALL delay_60
218  01D0F                           LOAD sd, 0f
219  01CFF                           LOAD sc, ff
21A  01BFF                           LOAD sb, ff
21B  01AFF                           LOAD sa, ff
21C  20085                           CALL SPI_32_bit_tx_rx
21D  20593                           CALL delay_60
21E  01DFE                           LOAD sd, fe
21F  01CF7                           LOAD sc, f7
220  01B00                           LOAD sb, 00
221  01A00                           LOAD sa, 00
222  20085                           CALL SPI_32_bit_tx_rx
223  20593                           CALL delay_60
224  01D0F                           LOAD sd, 0f
225  01CFF                           LOAD sc, ff
226  01BFF                           LOAD sb, ff
227  01AFF                           LOAD sa, ff
228  20085                           CALL SPI_32_bit_tx_rx
229  20593                           CALL delay_60
22A  01DFE                           LOAD sd, fe
22B  01CF7                           LOAD sc, f7
22C  01B00                           LOAD sb, 00
22D  01A00                           LOAD sa, 00
22E  20085                           CALL SPI_32_bit_tx_rx
22F  20593                           CALL delay_60
230  01D0F                           LOAD sd, 0f
231  01CFF                           LOAD sc, ff
232  01BFF                           LOAD sb, ff
233  01AFF                           LOAD sa, ff
234  20085                           CALL SPI_32_bit_tx_rx
235  20593                           CALL delay_60
236  01DFE                           LOAD sd, fe
237  01CF7                           LOAD sc, f7
238  01B00                           LOAD sb, 00
239  01A00                           LOAD sa, 00
23A  20085                           CALL SPI_32_bit_tx_rx
23B  20593                           CALL delay_60
23C  01D0F                           LOAD sd, 0f
23D  01CFF                           LOAD sc, ff
23E  01BFF                           LOAD sb, ff
23F  01AFF                           LOAD sa, ff
240  20085                           CALL SPI_32_bit_tx_rx
241  20593                           CALL delay_60
242  01DFE                           LOAD sd, fe
243  01CF7                           LOAD sc, f7
244  01B00                           LOAD sb, 00
245  01A00                           LOAD sa, 00
246  20085                           CALL SPI_32_bit_tx_rx
247  20593                           CALL delay_60
248  01D0F                           LOAD sd, 0f
249  01CFF                           LOAD sc, ff
24A  01BFF                           LOAD sb, ff
24B  01AFF                           LOAD sa, ff
24C  20085                           CALL SPI_32_bit_tx_rx
24D  20593                           CALL delay_60
24E  01DFE                           LOAD sd, fe
24F  01CF7                           LOAD sc, f7
250  01B00                           LOAD sb, 00
251  01A00                           LOAD sa, 00
252  20085                           CALL SPI_32_bit_tx_rx
253  20593                           CALL delay_60
254  01D0F                           LOAD sd, 0f
255  01CFF                           LOAD sc, ff
256  01BFF                           LOAD sb, ff
257  01AFF                           LOAD sa, ff
258  20085                           CALL SPI_32_bit_tx_rx
259  20593                           CALL delay_60
25A  2007F                           CALL SPI_disable
25B  20593                           CALL delay_60
25C  20082                           CALL SPI_enable
25D  20593                           CALL delay_60
25E  01D80                           LOAD sd, 80
25F  01C20                           LOAD sc, 20
260  01B04                           LOAD sb, 04
261  01A00                           LOAD sa, 00
262  20085                           CALL SPI_32_bit_tx_rx
263  20593                           CALL delay_60
264  01DFE                           LOAD sd, fe
265  01CF7                           LOAD sc, f7
266  01B00                           LOAD sb, 00
267  01A00                           LOAD sa, 00
268  20085                           CALL SPI_32_bit_tx_rx
269  20593                           CALL delay_60
26A  01D0F                           LOAD sd, 0f
26B  01CFF                           LOAD sc, ff
26C  01BFF                           LOAD sb, ff
26D  01AFF                           LOAD sa, ff
26E  20085                           CALL SPI_32_bit_tx_rx
26F  20593                           CALL delay_60
270  01DFE                           LOAD sd, fe
271  01CF7                           LOAD sc, f7
272  01B00                           LOAD sb, 00
273  01A00                           LOAD sa, 00
274  20085                           CALL SPI_32_bit_tx_rx
275  20593                           CALL delay_60
276  01D0F                           LOAD sd, 0f
277  01CFF                           LOAD sc, ff
278  01BFF                           LOAD sb, ff
279  01AFF                           LOAD sa, ff
27A  20085                           CALL SPI_32_bit_tx_rx
27B  20593                           CALL delay_60
27C  01DFE                           LOAD sd, fe
27D  01CF7                           LOAD sc, f7
27E  01B00                           LOAD sb, 00
27F  01A00                           LOAD sa, 00
280  20085                           CALL SPI_32_bit_tx_rx
281  20593                           CALL delay_60
282  01D13                           LOAD sd, 13
283  01CFF                           LOAD sc, ff
284  01BFF                           LOAD sb, ff
285  01AFF                           LOAD sa, ff
286  20085                           CALL SPI_32_bit_tx_rx
287  20593                           CALL delay_60
288  01DFE                           LOAD sd, fe
289  01CF7                           LOAD sc, f7
28A  01B00                           LOAD sb, 00
28B  01A00                           LOAD sa, 00
28C  20085                           CALL SPI_32_bit_tx_rx
28D  20593                           CALL delay_60
28E  01D13                           LOAD sd, 13
28F  01CFF                           LOAD sc, ff
290  01BFF                           LOAD sb, ff
291  01AFF                           LOAD sa, ff
292  20085                           CALL SPI_32_bit_tx_rx
293  20593                           CALL delay_60
294  01DFE                           LOAD sd, fe
295  01CF7                           LOAD sc, f7
296  01B00                           LOAD sb, 00
297  01A00                           LOAD sa, 00
298  20085                           CALL SPI_32_bit_tx_rx
299  20593                           CALL delay_60
29A  01D13                           LOAD sd, 13
29B  01CFF                           LOAD sc, ff
29C  01BFF                           LOAD sb, ff
29D  01AFF                           LOAD sa, ff
29E  20085                           CALL SPI_32_bit_tx_rx
29F  20593                           CALL delay_60
2A0  01DFE                           LOAD sd, fe
2A1  01CF7                           LOAD sc, f7
2A2  01B00                           LOAD sb, 00
2A3  01A00                           LOAD sa, 00
2A4  20085                           CALL SPI_32_bit_tx_rx
2A5  20593                           CALL delay_60
2A6  01D13                           LOAD sd, 13
2A7  01CFF                           LOAD sc, ff
2A8  01BFF                           LOAD sb, ff
2A9  01AFF                           LOAD sa, ff
2AA  20085                           CALL SPI_32_bit_tx_rx
2AB  20593                           CALL delay_60
2AC  01DFE                           LOAD sd, fe
2AD  01CF7                           LOAD sc, f7
2AE  01B00                           LOAD sb, 00
2AF  01A00                           LOAD sa, 00
2B0  20085                           CALL SPI_32_bit_tx_rx
2B1  20593                           CALL delay_60
2B2  01D13                           LOAD sd, 13
2B3  01CFF                           LOAD sc, ff
2B4  01BFF                           LOAD sb, ff
2B5  01AFF                           LOAD sa, ff
2B6  20085                           CALL SPI_32_bit_tx_rx
2B7  20593                           CALL delay_60
2B8  01DFE                           LOAD sd, fe
2B9  01CF7                           LOAD sc, f7
2BA  01B00                           LOAD sb, 00
2BB  01A00                           LOAD sa, 00
2BC  20085                           CALL SPI_32_bit_tx_rx
2BD  20593                           CALL delay_60
2BE  01D13                           LOAD sd, 13
2BF  01CFF                           LOAD sc, ff
2C0  01BFF                           LOAD sb, ff
2C1  01AFF                           LOAD sa, ff
2C2  20085                           CALL SPI_32_bit_tx_rx
2C3  20593                           CALL delay_60
2C4  01DFE                           LOAD sd, fe
2C5  01CF7                           LOAD sc, f7
2C6  01B00                           LOAD sb, 00
2C7  01A00                           LOAD sa, 00
2C8  20085                           CALL SPI_32_bit_tx_rx
2C9  20593                           CALL delay_60
2CA  01D13                           LOAD sd, 13
2CB  01CFF                           LOAD sc, ff
2CC  01BFF                           LOAD sb, ff
2CD  01AFF                           LOAD sa, ff
2CE  20085                           CALL SPI_32_bit_tx_rx
2CF  20593                           CALL delay_60
2D0  01DFE                           LOAD sd, fe
2D1  01CF7                           LOAD sc, f7
2D2  01B00                           LOAD sb, 00
2D3  01A00                           LOAD sa, 00
2D4  20085                           CALL SPI_32_bit_tx_rx
2D5  20593                           CALL delay_60
2D6  01D13                           LOAD sd, 13
2D7  01CFF                           LOAD sc, ff
2D8  01BFF                           LOAD sb, ff
2D9  01AFF                           LOAD sa, ff
2DA  20085                           CALL SPI_32_bit_tx_rx
2DB  20593                           CALL delay_60
2DC  01DFA                           LOAD sd, fa
2DD  01C2E                           LOAD sc, 2e
2DE  01B19                           LOAD sb, 19
2DF  01AF8                           LOAD sa, f8
2E0  20085                           CALL SPI_32_bit_tx_rx
2E1  20593                           CALL delay_60
2E2  01D07                           LOAD sd, 07
2E3  01C00                           LOAD sc, 00
2E4  01B00                           LOAD sb, 00
2E5  01A00                           LOAD sa, 00
2E6  20085                           CALL SPI_32_bit_tx_rx
2E7  20593                           CALL delay_60
2E8  01D00                           LOAD sd, 00
2E9  01C00                           LOAD sc, 00
2EA  01B00                           LOAD sb, 00
2EB  01A04                           LOAD sa, 04
2EC  20085                           CALL SPI_32_bit_tx_rx
2ED  20593                           CALL delay_60
2EE  01D58                           LOAD sd, 58
2EF  01C60                           LOAD sc, 60
2F0  01B94                           LOAD sb, 94
2F1  01A2E                           LOAD sa, 2e
2F2  20085                           CALL SPI_32_bit_tx_rx
2F3  20593                           CALL delay_60
2F4  01D00                           LOAD sd, 00
2F5  01C00                           LOAD sc, 00
2F6  01B00                           LOAD sb, 00
2F7  01A00                           LOAD sa, 00
2F8  20085                           CALL SPI_32_bit_tx_rx
2F9  20593                           CALL delay_60
2FA  01D00                           LOAD sd, 00
2FB  01C3F                           LOAD sc, 3f
2FC  01BF0                           LOAD sb, f0
2FD  01A00                           LOAD sa, 00
2FE  20085                           CALL SPI_32_bit_tx_rx
2FF  20593                           CALL delay_60
300  01D08                           LOAD sd, 08
301  01C00                           LOAD sc, 00
302  01B00                           LOAD sb, 00
303  01A00                           LOAD sa, 00
304  20085                           CALL SPI_32_bit_tx_rx
305  20593                           CALL delay_60
306  01D00                           LOAD sd, 00
307  01C3F                           LOAD sc, 3f
308  01BFF                           LOAD sb, ff
309  01A80                           LOAD sa, 80
30A  20085                           CALL SPI_32_bit_tx_rx
30B  20593                           CALL delay_60
30C  01DC7                           LOAD sd, c7
30D  01CEF                           LOAD sc, ef
30E  01B16                           LOAD sb, 16
30F  01AA7                           LOAD sa, a7
310  20085                           CALL SPI_32_bit_tx_rx
311  20593                           CALL delay_60
312  01D08                           LOAD sd, 08
313  01C00                           LOAD sc, 00
314  01B00                           LOAD sb, 00
315  01A00                           LOAD sa, 00
316  20085                           CALL SPI_32_bit_tx_rx
317  20593                           CALL delay_60
318  01D00                           LOAD sd, 00
319  01C00                           LOAD sc, 00
31A  01B00                           LOAD sb, 00
31B  01A1A                           LOAD sa, 1a
31C  20085                           CALL SPI_32_bit_tx_rx
31D  20593                           CALL delay_60
31E  01D6A                           LOAD sd, 6a
31F  01CF6                           LOAD sc, f6
320  01B23                           LOAD sb, 23
321  01A53                           LOAD sa, 53
322  20085                           CALL SPI_32_bit_tx_rx
323  20593                           CALL delay_60
324  01D10                           LOAD sd, 10
325  01C00                           LOAD sc, 00
326  01B00                           LOAD sb, 00
327  01A00                           LOAD sa, 00
328  20085                           CALL SPI_32_bit_tx_rx
329  20593                           CALL delay_60
32A  01DF7                           LOAD sd, f7
32B  01CBD                           LOAD sc, bd
32C  01BF5                           LOAD sb, f5
32D  01A8D                           LOAD sa, 8d
32E  20085                           CALL SPI_32_bit_tx_rx
32F  20593                           CALL delay_60
330  01D10                           LOAD sd, 10
331  01C00                           LOAD sc, 00
332  01B00                           LOAD sb, 00
333  01A00                           LOAD sa, 00
334  20085                           CALL SPI_32_bit_tx_rx
335  20593                           CALL delay_60
336  01DEF                           LOAD sd, ef
337  01C7B                           LOAD sc, 7b
338  01BF5                           LOAD sb, f5
339  01A8D                           LOAD sa, 8d
33A  20085                           CALL SPI_32_bit_tx_rx
33B  20593                           CALL delay_60
33C  01D10                           LOAD sd, 10
33D  01C00                           LOAD sc, 00
33E  01B00                           LOAD sb, 00
33F  01A00                           LOAD sa, 00
340  20085                           CALL SPI_32_bit_tx_rx
341  20593                           CALL delay_60
342  01DDE                           LOAD sd, de
343  01CF7                           LOAD sc, f7
344  01BF5                           LOAD sb, f5
345  01A8D                           LOAD sa, 8d
346  20085                           CALL SPI_32_bit_tx_rx
347  20593                           CALL delay_60
348  01D10                           LOAD sd, 10
349  01C00                           LOAD sc, 00
34A  01B00                           LOAD sb, 00
34B  01A00                           LOAD sa, 00
34C  20085                           CALL SPI_32_bit_tx_rx
34D  20593                           CALL delay_60
34E  01DBD                           LOAD sd, bd
34F  01CEF                           LOAD sc, ef
350  01BF5                           LOAD sb, f5
351  01A8D                           LOAD sa, 8d
352  20085                           CALL SPI_32_bit_tx_rx
353  20593                           CALL delay_60
354  01D10                           LOAD sd, 10
355  01C00                           LOAD sc, 00
356  01B00                           LOAD sb, 00
357  01A00                           LOAD sa, 00
358  20085                           CALL SPI_32_bit_tx_rx
359  20593                           CALL delay_60
35A  01D7B                           LOAD sd, 7b
35B  01CDF                           LOAD sc, df
35C  01BF5                           LOAD sb, f5
35D  01A8D                           LOAD sa, 8d
35E  20085                           CALL SPI_32_bit_tx_rx
35F  20593                           CALL delay_60
360  01D00                           LOAD sd, 00
361  01C00                           LOAD sc, 00
362  01B00                           LOAD sb, 00
363  01A00                           LOAD sa, 00
364  20085                           CALL SPI_32_bit_tx_rx
365  20593                           CALL delay_60
366  01D00                           LOAD sd, 00
367  01C00                           LOAD sc, 00
368  01B00                           LOAD sb, 00
369  01A00                           LOAD sa, 00
36A  20085                           CALL SPI_32_bit_tx_rx
36B  20593                           CALL delay_60
36C  01D00                           LOAD sd, 00
36D  01C00                           LOAD sc, 00
36E  01B00                           LOAD sb, 00
36F  01A00                           LOAD sa, 00
370  20085                           CALL SPI_32_bit_tx_rx
371  20593                           CALL delay_60
372  01D00                           LOAD sd, 00
373  01C00                           LOAD sc, 00
374  01B00                           LOAD sb, 00
375  01A00                           LOAD sa, 00
376  20085                           CALL SPI_32_bit_tx_rx
377  20593                           CALL delay_60
378  01D00                           LOAD sd, 00
379  01C00                           LOAD sc, 00
37A  01B00                           LOAD sb, 00
37B  01A00                           LOAD sa, 00
37C  20085                           CALL SPI_32_bit_tx_rx
37D  20593                           CALL delay_60
37E  01D00                           LOAD sd, 00
37F  01C00                           LOAD sc, 00
380  01B00                           LOAD sb, 00
381  01A00                           LOAD sa, 00
382  20085                           CALL SPI_32_bit_tx_rx
383  20593                           CALL delay_60
384  01D00                           LOAD sd, 00
385  01C00                           LOAD sc, 00
386  01B00                           LOAD sb, 00
387  01A00                           LOAD sa, 00
388  20085                           CALL SPI_32_bit_tx_rx
389  20593                           CALL delay_60
38A  01D00                           LOAD sd, 00
38B  01C00                           LOAD sc, 00
38C  01B00                           LOAD sb, 00
38D  01A00                           LOAD sa, 00
38E  20085                           CALL SPI_32_bit_tx_rx
38F  20593                           CALL delay_60
390  01D00                           LOAD sd, 00
391  01C00                           LOAD sc, 00
392  01B00                           LOAD sb, 00
393  01A00                           LOAD sa, 00
394  20085                           CALL SPI_32_bit_tx_rx
395  20593                           CALL delay_60
396  01D00                           LOAD sd, 00
397  01C00                           LOAD sc, 00
398  01B00                           LOAD sb, 00
399  01A00                           LOAD sa, 00
39A  20085                           CALL SPI_32_bit_tx_rx
39B  20593                           CALL delay_60
39C  01D00                           LOAD sd, 00
39D  01C00                           LOAD sc, 00
39E  01B00                           LOAD sb, 00
39F  01A00                           LOAD sa, 00
3A0  20085                           CALL SPI_32_bit_tx_rx
3A1  20593                           CALL delay_60
3A2  01D00                           LOAD sd, 00
3A3  01C00                           LOAD sc, 00
3A4  01B00                           LOAD sb, 00
3A5  01A00                           LOAD sa, 00
3A6  20085                           CALL SPI_32_bit_tx_rx
3A7  20593                           CALL delay_60
3A8  01D00                           LOAD sd, 00
3A9  01C00                           LOAD sc, 00
3AA  01B00                           LOAD sb, 00
3AB  01A00                           LOAD sa, 00
3AC  20085                           CALL SPI_32_bit_tx_rx
3AD  20593                           CALL delay_60
3AE  01D00                           LOAD sd, 00
3AF  01C00                           LOAD sc, 00
3B0  01B00                           LOAD sb, 00
3B1  01A00                           LOAD sa, 00
3B2  20085                           CALL SPI_32_bit_tx_rx
3B3  20593                           CALL delay_60
3B4  01D00                           LOAD sd, 00
3B5  01C00                           LOAD sc, 00
3B6  01B00                           LOAD sb, 00
3B7  01A00                           LOAD sa, 00
3B8  20085                           CALL SPI_32_bit_tx_rx
3B9  20593                           CALL delay_60
3BA  01D00                           LOAD sd, 00
3BB  01C00                           LOAD sc, 00
3BC  01B00                           LOAD sb, 00
3BD  01A00                           LOAD sa, 00
3BE  20085                           CALL SPI_32_bit_tx_rx
3BF  20593                           CALL delay_60
3C0  01DC0                           LOAD sd, c0
3C1  01C04                           LOAD sc, 04
3C2  01BA6                           LOAD sb, a6
3C3  01A06                           LOAD sa, 06
3C4  20085                           CALL SPI_32_bit_tx_rx
3C5  20593                           CALL delay_60
3C6  01D09                           LOAD sd, 09
3C7  01C00                           LOAD sc, 00
3C8  01B00                           LOAD sb, 00
3C9  01A00                           LOAD sa, 00
3CA  20085                           CALL SPI_32_bit_tx_rx
3CB  20593                           CALL delay_60
3CC  01D00                           LOAD sd, 00
3CD  01C00                           LOAD sc, 00
3CE  01B00                           LOAD sb, 00
3CF  01A23                           LOAD sa, 23
3D0  20085                           CALL SPI_32_bit_tx_rx
3D1  20593                           CALL delay_60
3D2  01DDA                           LOAD sd, da
3D3  01CB5                           LOAD sc, b5
3D4  01BBD                           LOAD sb, bd
3D5  01AC8                           LOAD sa, c8
3D6  20085                           CALL SPI_32_bit_tx_rx
3D7  20593                           CALL delay_60
3D8  01D00                           LOAD sd, 00
3D9  01C00                           LOAD sc, 00
3DA  01B00                           LOAD sb, 00
3DB  01A0E                           LOAD sa, 0e
3DC  20085                           CALL SPI_32_bit_tx_rx
3DD  20593                           CALL delay_60
3DE  01D00                           LOAD sd, 00
3DF  01C00                           LOAD sc, 00
3E0  01B00                           LOAD sb, 00
3E1  01A00                           LOAD sa, 00
3E2  20085                           CALL SPI_32_bit_tx_rx
3E3  20593                           CALL delay_60
3E4  2007F                           CALL SPI_disable
3E5  20593                           CALL delay_60
3E6  20082                           CALL SPI_enable
3E7  20593                           CALL delay_60
3E8  01D80                           LOAD sd, 80
3E9  01C20                           LOAD sc, 20
3EA  01B08                           LOAD sb, 08
3EB  01A00                           LOAD sa, 00
3EC  20085                           CALL SPI_32_bit_tx_rx
3ED  20593                           CALL delay_60
3EE  01D07                           LOAD sd, 07
3EF  01CFC                           LOAD sc, fc
3F0  01B01                           LOAD sb, 01
3F1  01A02                           LOAD sa, 02
3F2  20085                           CALL SPI_32_bit_tx_rx
3F3  20593                           CALL delay_60
3F4  01D00                           LOAD sd, 00
3F5  01C00                           LOAD sc, 00
3F6  01B00                           LOAD sb, 00
3F7  01A00                           LOAD sa, 00
3F8  20085                           CALL SPI_32_bit_tx_rx
3F9  20593                           CALL delay_60
3FA  01D00                           LOAD sd, 00
3FB  01C00                           LOAD sc, 00
3FC  01B00                           LOAD sb, 00
3FD  01A00                           LOAD sa, 00
3FE  20085                           CALL SPI_32_bit_tx_rx
3FF  20593                           CALL delay_60
400  01D00                           LOAD sd, 00
401  01C00                           LOAD sc, 00
402  01B00                           LOAD sb, 00
403  01A00                           LOAD sa, 00
404  20085                           CALL SPI_32_bit_tx_rx
405  20593                           CALL delay_60
406  01D00                           LOAD sd, 00
407  01C00                           LOAD sc, 00
408  01B00                           LOAD sb, 00
409  01A00                           LOAD sa, 00
40A  20085                           CALL SPI_32_bit_tx_rx
40B  20593                           CALL delay_60
40C  01D00                           LOAD sd, 00
40D  01C00                           LOAD sc, 00
40E  01B00                           LOAD sb, 00
40F  01A0E                           LOAD sa, 0e
410  20085                           CALL SPI_32_bit_tx_rx
411  20593                           CALL delay_60
412  01D00                           LOAD sd, 00
413  01C00                           LOAD sc, 00
414  01B00                           LOAD sb, 00
415  01A00                           LOAD sa, 00
416  20085                           CALL SPI_32_bit_tx_rx
417  20593                           CALL delay_60
418  01D07                           LOAD sd, 07
419  01CFC                           LOAD sc, fc
41A  01B01                           LOAD sb, 01
41B  01A02                           LOAD sa, 02
41C  20085                           CALL SPI_32_bit_tx_rx
41D  20593                           CALL delay_60
41E  01D00                           LOAD sd, 00
41F  01C00                           LOAD sc, 00
420  01B00                           LOAD sb, 00
421  01A00                           LOAD sa, 00
422  20085                           CALL SPI_32_bit_tx_rx
423  20593                           CALL delay_60
424  01D00                           LOAD sd, 00
425  01C00                           LOAD sc, 00
426  01B00                           LOAD sb, 00
427  01A00                           LOAD sa, 00
428  20085                           CALL SPI_32_bit_tx_rx
429  20593                           CALL delay_60
42A  01D00                           LOAD sd, 00
42B  01C00                           LOAD sc, 00
42C  01B00                           LOAD sb, 00
42D  01A00                           LOAD sa, 00
42E  20085                           CALL SPI_32_bit_tx_rx
42F  20593                           CALL delay_60
430  01D00                           LOAD sd, 00
431  01C00                           LOAD sc, 00
432  01B00                           LOAD sb, 00
433  01A00                           LOAD sa, 00
434  20085                           CALL SPI_32_bit_tx_rx
435  20593                           CALL delay_60
436  01D00                           LOAD sd, 00
437  01C00                           LOAD sc, 00
438  01B00                           LOAD sb, 00
439  01A0E                           LOAD sa, 0e
43A  20085                           CALL SPI_32_bit_tx_rx
43B  20593                           CALL delay_60
43C  01D00                           LOAD sd, 00
43D  01C00                           LOAD sc, 00
43E  01B00                           LOAD sb, 00
43F  01A00                           LOAD sa, 00
440  20085                           CALL SPI_32_bit_tx_rx
441  20593                           CALL delay_60
442  01D07                           LOAD sd, 07
443  01CFC                           LOAD sc, fc
444  01B01                           LOAD sb, 01
445  01A02                           LOAD sa, 02
446  20085                           CALL SPI_32_bit_tx_rx
447  20593                           CALL delay_60
448  01D00                           LOAD sd, 00
449  01C00                           LOAD sc, 00
44A  01B00                           LOAD sb, 00
44B  01A00                           LOAD sa, 00
44C  20085                           CALL SPI_32_bit_tx_rx
44D  20593                           CALL delay_60
44E  01D00                           LOAD sd, 00
44F  01C00                           LOAD sc, 00
450  01B00                           LOAD sb, 00
451  01A00                           LOAD sa, 00
452  20085                           CALL SPI_32_bit_tx_rx
453  20593                           CALL delay_60
454  01D00                           LOAD sd, 00
455  01C00                           LOAD sc, 00
456  01B00                           LOAD sb, 00
457  01A00                           LOAD sa, 00
458  20085                           CALL SPI_32_bit_tx_rx
459  20593                           CALL delay_60
45A  01D00                           LOAD sd, 00
45B  01C00                           LOAD sc, 00
45C  01B00                           LOAD sb, 00
45D  01A00                           LOAD sa, 00
45E  20085                           CALL SPI_32_bit_tx_rx
45F  20593                           CALL delay_60
460  01D00                           LOAD sd, 00
461  01C00                           LOAD sc, 00
462  01B00                           LOAD sb, 00
463  01A0E                           LOAD sa, 0e
464  20085                           CALL SPI_32_bit_tx_rx
465  20593                           CALL delay_60
466  01D00                           LOAD sd, 00
467  01C00                           LOAD sc, 00
468  01B00                           LOAD sb, 00
469  01A00                           LOAD sa, 00
46A  20085                           CALL SPI_32_bit_tx_rx
46B  20593                           CALL delay_60
46C  01D07                           LOAD sd, 07
46D  01CFC                           LOAD sc, fc
46E  01B01                           LOAD sb, 01
46F  01A02                           LOAD sa, 02
470  20085                           CALL SPI_32_bit_tx_rx
471  20593                           CALL delay_60
472  01D00                           LOAD sd, 00
473  01C00                           LOAD sc, 00
474  01B00                           LOAD sb, 00
475  01A00                           LOAD sa, 00
476  20085                           CALL SPI_32_bit_tx_rx
477  20593                           CALL delay_60
478  01D00                           LOAD sd, 00
479  01C00                           LOAD sc, 00
47A  01B00                           LOAD sb, 00
47B  01A00                           LOAD sa, 00
47C  20085                           CALL SPI_32_bit_tx_rx
47D  20593                           CALL delay_60
47E  01D00                           LOAD sd, 00
47F  01C00                           LOAD sc, 00
480  01B00                           LOAD sb, 00
481  01A00                           LOAD sa, 00
482  20085                           CALL SPI_32_bit_tx_rx
483  20593                           CALL delay_60
484  01D00                           LOAD sd, 00
485  01C00                           LOAD sc, 00
486  01B00                           LOAD sb, 00
487  01A00                           LOAD sa, 00
488  20085                           CALL SPI_32_bit_tx_rx
489  20593                           CALL delay_60
48A  01D00                           LOAD sd, 00
48B  01C00                           LOAD sc, 00
48C  01B00                           LOAD sb, 00
48D  01A0E                           LOAD sa, 0e
48E  20085                           CALL SPI_32_bit_tx_rx
48F  20593                           CALL delay_60
490  01D00                           LOAD sd, 00
491  01C00                           LOAD sc, 00
492  01B00                           LOAD sb, 00
493  01A00                           LOAD sa, 00
494  20085                           CALL SPI_32_bit_tx_rx
495  20593                           CALL delay_60
496  01D07                           LOAD sd, 07
497  01CFC                           LOAD sc, fc
498  01B01                           LOAD sb, 01
499  01A02                           LOAD sa, 02
49A  20085                           CALL SPI_32_bit_tx_rx
49B  20593                           CALL delay_60
49C  01D00                           LOAD sd, 00
49D  01C00                           LOAD sc, 00
49E  01B00                           LOAD sb, 00
49F  01A00                           LOAD sa, 00
4A0  20085                           CALL SPI_32_bit_tx_rx
4A1  20593                           CALL delay_60
4A2  01D00                           LOAD sd, 00
4A3  01C00                           LOAD sc, 00
4A4  01B00                           LOAD sb, 00
4A5  01A00                           LOAD sa, 00
4A6  20085                           CALL SPI_32_bit_tx_rx
4A7  20593                           CALL delay_60
4A8  01D00                           LOAD sd, 00
4A9  01C00                           LOAD sc, 00
4AA  01B00                           LOAD sb, 00
4AB  01A00                           LOAD sa, 00
4AC  20085                           CALL SPI_32_bit_tx_rx
4AD  20593                           CALL delay_60
4AE  01D00                           LOAD sd, 00
4AF  01C00                           LOAD sc, 00
4B0  01B00                           LOAD sb, 00
4B1  01A00                           LOAD sa, 00
4B2  20085                           CALL SPI_32_bit_tx_rx
4B3  20593                           CALL delay_60
4B4  01D53                           LOAD sd, 53
4B5  01C20                           LOAD sc, 20
4B6  01B87                           LOAD sb, 87
4B7  01A9E                           LOAD sa, 9e
4B8  20085                           CALL SPI_32_bit_tx_rx
4B9  20593                           CALL delay_60
4BA  01D0D                           LOAD sd, 0d
4BB  01C00                           LOAD sc, 00
4BC  01B00                           LOAD sb, 00
4BD  01A00                           LOAD sa, 00
4BE  20085                           CALL SPI_32_bit_tx_rx
4BF  20593                           CALL delay_60
4C0  01D00                           LOAD sd, 00
4C1  01C00                           LOAD sc, 00
4C2  01B00                           LOAD sb, 00
4C3  01A01                           LOAD sa, 01
4C4  20085                           CALL SPI_32_bit_tx_rx
4C5  20593                           CALL delay_60
4C6  01D25                           LOAD sd, 25
4C7  01C0E                           LOAD sc, 0e
4C8  01B7C                           LOAD sb, 7c
4C9  01ABD                           LOAD sa, bd
4CA  20085                           CALL SPI_32_bit_tx_rx
4CB  20593                           CALL delay_60
4CC  01D00                           LOAD sd, 00
4CD  01C01                           LOAD sc, 01
4CE  01B25                           LOAD sb, 25
4CF  01AC0                           LOAD sa, c0
4D0  20085                           CALL SPI_32_bit_tx_rx
4D1  20593                           CALL delay_60
4D2  01D70                           LOAD sd, 70
4D3  01C94                           LOAD sc, 94
4D4  01B84                           LOAD sb, 84
4D5  01A50                           LOAD sa, 50
4D6  20085                           CALL SPI_32_bit_tx_rx
4D7  20593                           CALL delay_60
4D8  01D0E                           LOAD sd, 0e
4D9  01C00                           LOAD sc, 00
4DA  01B00                           LOAD sb, 00
4DB  01A00                           LOAD sa, 00
4DC  20085                           CALL SPI_32_bit_tx_rx
4DD  20593                           CALL delay_60
4DE  01D00                           LOAD sd, 00
4DF  01C00                           LOAD sc, 00
4E0  01B00                           LOAD sb, 00
4E1  01A03                           LOAD sa, 03
4E2  20085                           CALL SPI_32_bit_tx_rx
4E3  20593                           CALL delay_60
4E4  01DC8                           LOAD sd, c8
4E5  01CA7                           LOAD sc, a7
4E6  01BCE                           LOAD sb, ce
4E7  01AE6                           LOAD sa, e6
4E8  20085                           CALL SPI_32_bit_tx_rx
4E9  20593                           CALL delay_60
4EA  01D00                           LOAD sd, 00
4EB  01C71                           LOAD sc, 71
4EC  01BC0                           LOAD sb, c0
4ED  01A00                           LOAD sa, 00
4EE  20085                           CALL SPI_32_bit_tx_rx
4EF  20593                           CALL delay_60
4F0  01D00                           LOAD sd, 00
4F1  01C00                           LOAD sc, 00
4F2  01B00                           LOAD sb, 00
4F3  01A00                           LOAD sa, 00
4F4  20085                           CALL SPI_32_bit_tx_rx
4F5  20593                           CALL delay_60
4F6  01D00                           LOAD sd, 00
4F7  01C00                           LOAD sc, 00
4F8  01B00                           LOAD sb, 00
4F9  01A00                           LOAD sa, 00
4FA  20085                           CALL SPI_32_bit_tx_rx
4FB  20593                           CALL delay_60
4FC  01DC3                           LOAD sd, c3
4FD  01CF7                           LOAD sc, f7
4FE  01B04                           LOAD sb, 04
4FF  01AB9                           LOAD sa, b9
500  20085                           CALL SPI_32_bit_tx_rx
501  20593                           CALL delay_60
502  01D11                           LOAD sd, 11
503  01C00                           LOAD sc, 00
504  01B00                           LOAD sb, 00
505  01A00                           LOAD sa, 00
506  20085                           CALL SPI_32_bit_tx_rx
507  20593                           CALL delay_60
508  01D00                           LOAD sd, 00
509  01C00                           LOAD sc, 00
50A  01B00                           LOAD sb, 00
50B  01A0A                           LOAD sa, 0a
50C  20085                           CALL SPI_32_bit_tx_rx
50D  20593                           CALL delay_60
50E  01D57                           LOAD sd, 57
50F  01C1F                           LOAD sc, 1f
510  01B81                           LOAD sb, 81
511  01A3F                           LOAD sa, 3f
512  20085                           CALL SPI_32_bit_tx_rx
513  20593                           CALL delay_60
514  01D06                           LOAD sd, 06
515  01C44                           LOAD sc, 44
516  01B00                           LOAD sb, 00
517  01A00                           LOAD sa, 00
518  20085                           CALL SPI_32_bit_tx_rx
519  20593                           CALL delay_60
51A  01D00                           LOAD sd, 00
51B  01C00                           LOAD sc, 00
51C  01B04                           LOAD sb, 04
51D  01A08                           LOAD sa, 08
51E  20085                           CALL SPI_32_bit_tx_rx
51F  20593                           CALL delay_60
520  01D00                           LOAD sd, 00
521  01C00                           LOAD sc, 00
522  01B00                           LOAD sb, 00
523  01A00                           LOAD sa, 00
524  20085                           CALL SPI_32_bit_tx_rx
525  20593                           CALL delay_60
526  01DFF                           LOAD sd, ff
527  01C0D                           LOAD sc, 0d
528  01BA0                           LOAD sb, a0
529  01A00                           LOAD sa, 00
52A  20085                           CALL SPI_32_bit_tx_rx
52B  20593                           CALL delay_60
52C  01DFF                           LOAD sd, ff
52D  01CFF                           LOAD sc, ff
52E  01BFF                           LOAD sb, ff
52F  01AFF                           LOAD sa, ff
530  20085                           CALL SPI_32_bit_tx_rx
531  20593                           CALL delay_60
532  01DFF                           LOAD sd, ff
533  01CFF                           LOAD sc, ff
534  01BFF                           LOAD sb, ff
535  01AFF                           LOAD sa, ff
536  20085                           CALL SPI_32_bit_tx_rx
537  20593                           CALL delay_60
538  01D00                           LOAD sd, 00
539  01CFF                           LOAD sc, ff
53A  01BFF                           LOAD sb, ff
53B  01AFF                           LOAD sa, ff
53C  20085                           CALL SPI_32_bit_tx_rx
53D  20593                           CALL delay_60
53E  01D00                           LOAD sd, 00
53F  01C00                           LOAD sc, 00
540  01B00                           LOAD sb, 00
541  01A00                           LOAD sa, 00
542  20085                           CALL SPI_32_bit_tx_rx
543  20593                           CALL delay_60
544  01D00                           LOAD sd, 00
545  01C00                           LOAD sc, 00
546  01B00                           LOAD sb, 00
547  01A00                           LOAD sa, 00
548  20085                           CALL SPI_32_bit_tx_rx
549  20593                           CALL delay_60
54A  01D58                           LOAD sd, 58
54B  01C00                           LOAD sc, 00
54C  01B00                           LOAD sb, 00
54D  01A00                           LOAD sa, 00
54E  20085                           CALL SPI_32_bit_tx_rx
54F  20593                           CALL delay_60
550  01D04                           LOAD sd, 04
551  01CE8                           LOAD sc, e8
552  01B9C                           LOAD sb, 9c
553  01A75                           LOAD sa, 75
554  20085                           CALL SPI_32_bit_tx_rx
555  20593                           CALL delay_60
556  01D4E                           LOAD sd, 4e
557  01C00                           LOAD sc, 00
558  01B00                           LOAD sb, 00
559  01A00                           LOAD sa, 00
55A  20085                           CALL SPI_32_bit_tx_rx
55B  20593                           CALL delay_60
55C  01D00                           LOAD sd, 00
55D  01C00                           LOAD sc, 00
55E  01B00                           LOAD sb, 00
55F  01A01                           LOAD sa, 01
560  20085                           CALL SPI_32_bit_tx_rx
561  20593                           CALL delay_60
562  01D3A                           LOAD sd, 3a
563  01C5D                           LOAD sc, 5d
564  01B5E                           LOAD sb, 5e
565  01A24                           LOAD sa, 24
566  20085                           CALL SPI_32_bit_tx_rx
567  20593                           CALL delay_60
568  01D5B                           LOAD sd, 5b
569  01C24                           LOAD sc, 24
56A  01B00                           LOAD sb, 00
56B  01A00                           LOAD sa, 00
56C  20085                           CALL SPI_32_bit_tx_rx
56D  20593                           CALL delay_60
56E  2007F                           CALL SPI_disable
56F  20593                           CALL delay_60
570  20082                           CALL SPI_enable
571  20593                           CALL delay_60
572  01D80                           LOAD sd, 80
573  01C20                           LOAD sc, 20
574  01B0C                           LOAD sb, 0c
575  01A00                           LOAD sa, 00
576  20085                           CALL SPI_32_bit_tx_rx
577  20593                           CALL delay_60
578  01D2C                           LOAD sd, 2c
579  01C15                           LOAD sc, 15
57A  01BB6                           LOAD sb, b6
57B  01AC6                           LOAD sa, c6
57C  20085                           CALL SPI_32_bit_tx_rx
57D  20593                           CALL delay_60
57E  01D00                           LOAD sd, 00
57F  01C00                           LOAD sc, 00
580  01B00                           LOAD sb, 00
581  01A00                           LOAD sa, 00
582  20085                           CALL SPI_32_bit_tx_rx
583  20593                           CALL delay_60
584  01D00                           LOAD sd, 00
585  01C00                           LOAD sc, 00
586  01B00                           LOAD sb, 00
587  01A00                           LOAD sa, 00
588  20085                           CALL SPI_32_bit_tx_rx
589  20593                           CALL delay_60
58A  01DDF                           LOAD sd, df
58B  01C65                           LOAD sc, 65
58C  01BAA                           LOAD sb, aa
58D  01A65                           LOAD sa, 65
58E  20085                           CALL SPI_32_bit_tx_rx
58F  20593                           CALL delay_60
590  2007F                           CALL SPI_disable
591  20593                           CALL delay_60
592  25000                           RETURN
593                        delay_60:
593  20595                           CALL DTREE_f6_0001_9           ; Delay for 1025 cycles
594  2259F                           JUMP DTREE_f6_0001_end
595  20596          DTREE_f6_0001_9: CALL DTREE_f6_0001_8
596  20597          DTREE_f6_0001_8: CALL DTREE_f6_0001_7
597  20598          DTREE_f6_0001_7: CALL DTREE_f6_0001_6
598  20599          DTREE_f6_0001_6: CALL DTREE_f6_0001_5
599  2059A          DTREE_f6_0001_5: CALL DTREE_f6_0001_4
59A  2059B          DTREE_f6_0001_4: CALL DTREE_f6_0001_3
59B  2059C          DTREE_f6_0001_3: CALL DTREE_f6_0001_2
59C  2059D          DTREE_f6_0001_2: CALL DTREE_f6_0001_1
59D  2059E          DTREE_f6_0001_1: CALL DTREE_f6_0001_0
59E  25000          DTREE_f6_0001_0: RETURN
59F               DTREE_f6_0001_end:
59F  205A1                           CALL DTREE_f6_0002_8           ; Delay for 513 cycles
5A0  225AA                           JUMP DTREE_f6_0002_end
5A1  205A2          DTREE_f6_0002_8: CALL DTREE_f6_0002_7
5A2  205A3          DTREE_f6_0002_7: CALL DTREE_f6_0002_6
5A3  205A4          DTREE_f6_0002_6: CALL DTREE_f6_0002_5
5A4  205A5          DTREE_f6_0002_5: CALL DTREE_f6_0002_4
5A5  205A6          DTREE_f6_0002_4: CALL DTREE_f6_0002_3
5A6  205A7          DTREE_f6_0002_3: CALL DTREE_f6_0002_2
5A7  205A8          DTREE_f6_0002_2: CALL DTREE_f6_0002_1
5A8  205A9          DTREE_f6_0002_1: CALL DTREE_f6_0002_0
5A9  25000          DTREE_f6_0002_0: RETURN
5AA               DTREE_f6_0002_end:
5AA  205AC                           CALL DTREE_f6_0003_7           ; Delay for 257 cycles
5AB  225B4                           JUMP DTREE_f6_0003_end
5AC  205AD          DTREE_f6_0003_7: CALL DTREE_f6_0003_6
5AD  205AE          DTREE_f6_0003_6: CALL DTREE_f6_0003_5
5AE  205AF          DTREE_f6_0003_5: CALL DTREE_f6_0003_4
5AF  205B0          DTREE_f6_0003_4: CALL DTREE_f6_0003_3
5B0  205B1          DTREE_f6_0003_3: CALL DTREE_f6_0003_2
5B1  205B2          DTREE_f6_0003_2: CALL DTREE_f6_0003_1
5B2  205B3          DTREE_f6_0003_1: CALL DTREE_f6_0003_0
5B3  25000          DTREE_f6_0003_0: RETURN
5B4               DTREE_f6_0003_end:
5B4  205B6                           CALL DTREE_f6_0004_6           ; Delay for 129 cycles
5B5  225BD                           JUMP DTREE_f6_0004_end
5B6  205B7          DTREE_f6_0004_6: CALL DTREE_f6_0004_5
5B7  205B8          DTREE_f6_0004_5: CALL DTREE_f6_0004_4
5B8  205B9          DTREE_f6_0004_4: CALL DTREE_f6_0004_3
5B9  205BA          DTREE_f6_0004_3: CALL DTREE_f6_0004_2
5BA  205BB          DTREE_f6_0004_2: CALL DTREE_f6_0004_1
5BB  205BC          DTREE_f6_0004_1: CALL DTREE_f6_0004_0
5BC  25000          DTREE_f6_0004_0: RETURN
5BD               DTREE_f6_0004_end:
5BD  205BF                           CALL DTREE_f6_0005_5           ; Delay for 65 cycles
5BE  225C5                           JUMP DTREE_f6_0005_end
5BF  205C0          DTREE_f6_0005_5: CALL DTREE_f6_0005_4
5C0  205C1          DTREE_f6_0005_4: CALL DTREE_f6_0005_3
5C1  205C2          DTREE_f6_0005_3: CALL DTREE_f6_0005_2
5C2  205C3          DTREE_f6_0005_2: CALL DTREE_f6_0005_1
5C3  205C4          DTREE_f6_0005_1: CALL DTREE_f6_0005_0
5C4  25000          DTREE_f6_0005_0: RETURN
5C5               DTREE_f6_0005_end:
5C5  205C7                           CALL DTREE_f6_0006_2           ; Delay for 9 cycles
5C6  225CA                           JUMP DTREE_f6_0006_end
5C7  205C8          DTREE_f6_0006_2: CALL DTREE_f6_0006_1
5C8  205C9          DTREE_f6_0006_1: CALL DTREE_f6_0006_0
5C9  25000          DTREE_f6_0006_0: RETURN
5CA               DTREE_f6_0006_end:
5CA  00EE0                           LOAD se, se                    ; NOP
5CB  00EE0                           LOAD se, se                    ; NOP

5CC  25000                           RETURN


5CD                                  STRING welcome_str$, "<* GCU 1F3 SJA1150 switch programming terminal *>"
5CD                                  STRING command_sel_str$, "CMD>"

5CD                 welcome_message:
5CD  2153C KEEP                      LOAD&RETURN s5, "<"
5CE  2152A KEEP                      LOAD&RETURN s5, "*"
5CF  21520 KEEP                      LOAD&RETURN s5, " "
5D0  21547 KEEP                      LOAD&RETURN s5, "G"
5D1  21543 KEEP                      LOAD&RETURN s5, "C"
5D2  21555 KEEP                      LOAD&RETURN s5, "U"
5D3  21520 KEEP                      LOAD&RETURN s5, " "
5D4  21531 KEEP                      LOAD&RETURN s5, "1"
5D5  21546 KEEP                      LOAD&RETURN s5, "F"
5D6  21533 KEEP                      LOAD&RETURN s5, "3"
5D7  21520 KEEP                      LOAD&RETURN s5, " "
5D8  21553 KEEP                      LOAD&RETURN s5, "S"
5D9  2154A KEEP                      LOAD&RETURN s5, "J"
5DA  21541 KEEP                      LOAD&RETURN s5, "A"
5DB  21531 KEEP                      LOAD&RETURN s5, "1"
5DC  21531 KEEP                      LOAD&RETURN s5, "1"
5DD  21535 KEEP                      LOAD&RETURN s5, "5"
5DE  21530 KEEP                      LOAD&RETURN s5, "0"
5DF  21520 KEEP                      LOAD&RETURN s5, " "
5E0  21573 KEEP                      LOAD&RETURN s5, "s"
5E1  21577 KEEP                      LOAD&RETURN s5, "w"
5E2  21569 KEEP                      LOAD&RETURN s5, "i"
5E3  21574 KEEP                      LOAD&RETURN s5, "t"
5E4  21563 KEEP                      LOAD&RETURN s5, "c"
5E5  21568 KEEP                      LOAD&RETURN s5, "h"
5E6  21520 KEEP                      LOAD&RETURN s5, " "
5E7  21570 KEEP                      LOAD&RETURN s5, "p"
5E8  21572 KEEP                      LOAD&RETURN s5, "r"
5E9  2156F KEEP                      LOAD&RETURN s5, "o"
5EA  21567 KEEP                      LOAD&RETURN s5, "g"
5EB  21572 KEEP                      LOAD&RETURN s5, "r"
5EC  21561 KEEP                      LOAD&RETURN s5, "a"
5ED  2156D KEEP                      LOAD&RETURN s5, "m"
5EE  2156D KEEP                      LOAD&RETURN s5, "m"
5EF  21569 KEEP                      LOAD&RETURN s5, "i"
5F0  2156E KEEP                      LOAD&RETURN s5, "n"
5F1  21567 KEEP                      LOAD&RETURN s5, "g"
5F2  21520 KEEP                      LOAD&RETURN s5, " "
5F3  21574 KEEP                      LOAD&RETURN s5, "t"
5F4  21565 KEEP                      LOAD&RETURN s5, "e"
5F5  21572 KEEP                      LOAD&RETURN s5, "r"
5F6  2156D KEEP                      LOAD&RETURN s5, "m"
5F7  21569 KEEP                      LOAD&RETURN s5, "i"
5F8  2156E KEEP                      LOAD&RETURN s5, "n"
5F9  21561 KEEP                      LOAD&RETURN s5, "a"
5FA  2156C KEEP                      LOAD&RETURN s5, "l"
5FB  21520 KEEP                      LOAD&RETURN s5, " "
5FC  2152A KEEP                      LOAD&RETURN s5, "*"
5FD  2153E KEEP                      LOAD&RETURN s5, ">"
5FE  2150D KEEP                      LOAD&RETURN s5, CR
5FF  21500 KEEP                      LOAD&RETURN s5, NUL

600             command_sel_message:
600  21543 KEEP                      LOAD&RETURN s5, "C"
601  2154D KEEP                      LOAD&RETURN s5, "M"
602  21544 KEEP                      LOAD&RETURN s5, "D"
603  2153E KEEP                      LOAD&RETURN s5, ">"
604  2150D KEEP                      LOAD&RETURN s5, CR
605  21500 KEEP                      LOAD&RETURN s5, NUL

606                 SPI_send_32_bit:
606  01E08                           LOAD se, 8                     ; 8 digits to acquire
607  20048                           CALL obtain_value
608  20085                           CALL SPI_32_bit_tx_rx
609  200BE                           CALL store_reg_in_first_slot
60A  20021                           CALL send_CR
60B  20023                           CALL send_NL
60C  01552                           LOAD s5, "R"
60D  20001                           CALL UART_TX
60E  20076                           CALL send_32_bit
60F  25000                           RETURN

610             write_clock_registers:
610                                  ;; 	w81 00 02 40 0B 00 00 00
610  01D81                           LOAD sd, 81
611  01C00                           LOAD sc, 00
612  01B02                           LOAD sb, 02
613  01A40                           LOAD sa, 40
614  200BE                           CALL store_reg_in_first_slot
615  01D0B                           LOAD sd, 0B
616  01C00                           LOAD sc, 00
617  01B00                           LOAD sb, 00
618  01A00                           LOAD sa, 00
619  200C3                           CALL store_reg_in_second_slot
61A  20632                           CALL SPI_send_64bit_nouart

61B                                  ;; 	w81 00 02 B0 0B 00 00 00
61B  01D81                           LOAD sd, 81
61C  01C00                           LOAD sc, 00
61D  01B02                           LOAD sb, 02
61E  01AB0                           LOAD sa, B0
61F  200BE                           CALL store_reg_in_first_slot
620  01D0B                           LOAD sd, 0B
621  01C00                           LOAD sc, 00
622  01B00                           LOAD sb, 00
623  01A00                           LOAD sa, 00
624  200C3                           CALL store_reg_in_second_slot
625  20632                           CALL SPI_send_64bit_nouart

626                                  ;; 	w81 00 03 20 0B 00 00 00
626  01D81                           LOAD sd, 81
627  01C00                           LOAD sc, 00
628  01B03                           LOAD sb, 03
629  01A20                           LOAD sa, 20
62A  200BE                           CALL store_reg_in_first_slot
62B  01D0B                           LOAD sd, 0B
62C  01C00                           LOAD sc, 00
62D  01B00                           LOAD sb, 00
62E  01A00                           LOAD sa, 00
62F  200C3                           CALL store_reg_in_second_slot
630  20632                           CALL SPI_send_64bit_nouart
631  25000                           RETURN


632             SPI_send_64bit_nouart:
632  200C8                           CALL fetch_reg_in_first_slot
633  20082                           CALL SPI_enable
634  20636                           CALL DTREE_f1_0001_3           ; Delay for 17 cycles
635  2263A                           JUMP DTREE_f1_0001_end
636  20637          DTREE_f1_0001_3: CALL DTREE_f1_0001_2
637  20638          DTREE_f1_0001_2: CALL DTREE_f1_0001_1
638  20639          DTREE_f1_0001_1: CALL DTREE_f1_0001_0
639  25000          DTREE_f1_0001_0: RETURN
63A               DTREE_f1_0001_end:
63A  00EE0                           LOAD se, se                    ; NOP
63B  00EE0                           LOAD se, se                    ; NOP
63C  00EE0                           LOAD se, se                    ; NOP

63D  2063F                           CALL DTREE_f1_0002_3           ; Delay for 17 cycles
63E  22643                           JUMP DTREE_f1_0002_end
63F  20640          DTREE_f1_0002_3: CALL DTREE_f1_0002_2
640  20641          DTREE_f1_0002_2: CALL DTREE_f1_0002_1
641  20642          DTREE_f1_0002_1: CALL DTREE_f1_0002_0
642  25000          DTREE_f1_0002_0: RETURN
643               DTREE_f1_0002_end:
643  00EE0                           LOAD se, se                    ; NOP
644  00EE0                           LOAD se, se                    ; NOP
645  00EE0                           LOAD se, se                    ; NOP

646  20648                           CALL DTREE_f1_0003_3           ; Delay for 17 cycles
647  2264C                           JUMP DTREE_f1_0003_end
648  20649          DTREE_f1_0003_3: CALL DTREE_f1_0003_2
649  2064A          DTREE_f1_0003_2: CALL DTREE_f1_0003_1
64A  2064B          DTREE_f1_0003_1: CALL DTREE_f1_0003_0
64B  25000          DTREE_f1_0003_0: RETURN
64C               DTREE_f1_0003_end:
64C  00EE0                           LOAD se, se                    ; NOP
64D  00EE0                           LOAD se, se                    ; NOP
64E  00EE0                           LOAD se, se                    ; NOP

64F  20085                           CALL SPI_32_bit_tx_rx
650  200CD                           CALL fetch_reg_in_second_slot
651  20653                           CALL DTREE_f1_0004_3           ; Delay for 17 cycles
652  22657                           JUMP DTREE_f1_0004_end
653  20654          DTREE_f1_0004_3: CALL DTREE_f1_0004_2
654  20655          DTREE_f1_0004_2: CALL DTREE_f1_0004_1
655  20656          DTREE_f1_0004_1: CALL DTREE_f1_0004_0
656  25000          DTREE_f1_0004_0: RETURN
657               DTREE_f1_0004_end:
657  00EE0                           LOAD se, se                    ; NOP
658  00EE0                           LOAD se, se                    ; NOP
659  00EE0                           LOAD se, se                    ; NOP

65A  2065C                           CALL DTREE_f1_0005_3           ; Delay for 17 cycles
65B  22660                           JUMP DTREE_f1_0005_end
65C  2065D          DTREE_f1_0005_3: CALL DTREE_f1_0005_2
65D  2065E          DTREE_f1_0005_2: CALL DTREE_f1_0005_1
65E  2065F          DTREE_f1_0005_1: CALL DTREE_f1_0005_0
65F  25000          DTREE_f1_0005_0: RETURN
660               DTREE_f1_0005_end:
660  00EE0                           LOAD se, se                    ; NOP
661  00EE0                           LOAD se, se                    ; NOP
662  00EE0                           LOAD se, se                    ; NOP

663  20665                           CALL DTREE_f1_0006_3           ; Delay for 17 cycles
664  22669                           JUMP DTREE_f1_0006_end
665  20666          DTREE_f1_0006_3: CALL DTREE_f1_0006_2
666  20667          DTREE_f1_0006_2: CALL DTREE_f1_0006_1
667  20668          DTREE_f1_0006_1: CALL DTREE_f1_0006_0
668  25000          DTREE_f1_0006_0: RETURN
669               DTREE_f1_0006_end:
669  00EE0                           LOAD se, se                    ; NOP
66A  00EE0                           LOAD se, se                    ; NOP
66B  00EE0                           LOAD se, se                    ; NOP

66C  20085                           CALL SPI_32_bit_tx_rx
66D  2066F                           CALL DTREE_f1_0007_3           ; Delay for 17 cycles
66E  22673                           JUMP DTREE_f1_0007_end
66F  20670          DTREE_f1_0007_3: CALL DTREE_f1_0007_2
670  20671          DTREE_f1_0007_2: CALL DTREE_f1_0007_1
671  20672          DTREE_f1_0007_1: CALL DTREE_f1_0007_0
672  25000          DTREE_f1_0007_0: RETURN
673               DTREE_f1_0007_end:
673  00EE0                           LOAD se, se                    ; NOP
674  00EE0                           LOAD se, se                    ; NOP
675  00EE0                           LOAD se, se                    ; NOP

676  20678                           CALL DTREE_f1_0008_3           ; Delay for 17 cycles
677  2267C                           JUMP DTREE_f1_0008_end
678  20679          DTREE_f1_0008_3: CALL DTREE_f1_0008_2
679  2067A          DTREE_f1_0008_2: CALL DTREE_f1_0008_1
67A  2067B          DTREE_f1_0008_1: CALL DTREE_f1_0008_0
67B  25000          DTREE_f1_0008_0: RETURN
67C               DTREE_f1_0008_end:
67C  00EE0                           LOAD se, se                    ; NOP
67D  00EE0                           LOAD se, se                    ; NOP
67E  00EE0                           LOAD se, se                    ; NOP

67F  20681                           CALL DTREE_f1_0009_3           ; Delay for 17 cycles
680  22685                           JUMP DTREE_f1_0009_end
681  20682          DTREE_f1_0009_3: CALL DTREE_f1_0009_2
682  20683          DTREE_f1_0009_2: CALL DTREE_f1_0009_1
683  20684          DTREE_f1_0009_1: CALL DTREE_f1_0009_0
684  25000          DTREE_f1_0009_0: RETURN
685               DTREE_f1_0009_end:
685  00EE0                           LOAD se, se                    ; NOP
686  00EE0                           LOAD se, se                    ; NOP
687  00EE0                           LOAD se, se                    ; NOP

688  2007F                           CALL SPI_disable
689  25000                           RETURN

68A                  SPI_send_64bit:
68A  01E08                           LOAD se, 8                     ; 8 digits to acquire
68B  20048                           CALL obtain_value
68C  200BE                           CALL store_reg_in_first_slot
68D  01E08                           LOAD se, 8                     ; 8 digits to acquire
68E  20048                           CALL obtain_value
68F  200C3                           CALL store_reg_in_second_slot
690                                  ;;  prepare Register set to be sent via SPI
690  200C8                           CALL fetch_reg_in_first_slot
691  20082                           CALL SPI_enable
692  20694                           CALL DTREE_f1_0010_3           ; Delay for 17 cycles
693  22698                           JUMP DTREE_f1_0010_end
694  20695          DTREE_f1_0010_3: CALL DTREE_f1_0010_2
695  20696          DTREE_f1_0010_2: CALL DTREE_f1_0010_1
696  20697          DTREE_f1_0010_1: CALL DTREE_f1_0010_0
697  25000          DTREE_f1_0010_0: RETURN
698               DTREE_f1_0010_end:
698  00EE0                           LOAD se, se                    ; NOP
699  00EE0                           LOAD se, se                    ; NOP
69A  00EE0                           LOAD se, se                    ; NOP

69B  2069D                           CALL DTREE_f1_0011_3           ; Delay for 17 cycles
69C  226A1                           JUMP DTREE_f1_0011_end
69D  2069E          DTREE_f1_0011_3: CALL DTREE_f1_0011_2
69E  2069F          DTREE_f1_0011_2: CALL DTREE_f1_0011_1
69F  206A0          DTREE_f1_0011_1: CALL DTREE_f1_0011_0
6A0  25000          DTREE_f1_0011_0: RETURN
6A1               DTREE_f1_0011_end:
6A1  00EE0                           LOAD se, se                    ; NOP
6A2  00EE0                           LOAD se, se                    ; NOP
6A3  00EE0                           LOAD se, se                    ; NOP

6A4  206A6                           CALL DTREE_f1_0012_3           ; Delay for 17 cycles
6A5  226AA                           JUMP DTREE_f1_0012_end
6A6  206A7          DTREE_f1_0012_3: CALL DTREE_f1_0012_2
6A7  206A8          DTREE_f1_0012_2: CALL DTREE_f1_0012_1
6A8  206A9          DTREE_f1_0012_1: CALL DTREE_f1_0012_0
6A9  25000          DTREE_f1_0012_0: RETURN
6AA               DTREE_f1_0012_end:
6AA  00EE0                           LOAD se, se                    ; NOP
6AB  00EE0                           LOAD se, se                    ; NOP
6AC  00EE0                           LOAD se, se                    ; NOP

6AD  20085                           CALL SPI_32_bit_tx_rx
6AE  200BE                           CALL store_reg_in_first_slot
6AF  200CD                           CALL fetch_reg_in_second_slot
6B0  206B2                           CALL DTREE_f1_0013_3           ; Delay for 17 cycles
6B1  226B6                           JUMP DTREE_f1_0013_end
6B2  206B3          DTREE_f1_0013_3: CALL DTREE_f1_0013_2
6B3  206B4          DTREE_f1_0013_2: CALL DTREE_f1_0013_1
6B4  206B5          DTREE_f1_0013_1: CALL DTREE_f1_0013_0
6B5  25000          DTREE_f1_0013_0: RETURN
6B6               DTREE_f1_0013_end:
6B6  00EE0                           LOAD se, se                    ; NOP
6B7  00EE0                           LOAD se, se                    ; NOP
6B8  00EE0                           LOAD se, se                    ; NOP

6B9  206BB                           CALL DTREE_f1_0014_3           ; Delay for 17 cycles
6BA  226BF                           JUMP DTREE_f1_0014_end
6BB  206BC          DTREE_f1_0014_3: CALL DTREE_f1_0014_2
6BC  206BD          DTREE_f1_0014_2: CALL DTREE_f1_0014_1
6BD  206BE          DTREE_f1_0014_1: CALL DTREE_f1_0014_0
6BE  25000          DTREE_f1_0014_0: RETURN
6BF               DTREE_f1_0014_end:
6BF  00EE0                           LOAD se, se                    ; NOP
6C0  00EE0                           LOAD se, se                    ; NOP
6C1  00EE0                           LOAD se, se                    ; NOP

6C2  206C4                           CALL DTREE_f1_0015_3           ; Delay for 17 cycles
6C3  226C8                           JUMP DTREE_f1_0015_end
6C4  206C5          DTREE_f1_0015_3: CALL DTREE_f1_0015_2
6C5  206C6          DTREE_f1_0015_2: CALL DTREE_f1_0015_1
6C6  206C7          DTREE_f1_0015_1: CALL DTREE_f1_0015_0
6C7  25000          DTREE_f1_0015_0: RETURN
6C8               DTREE_f1_0015_end:
6C8  00EE0                           LOAD se, se                    ; NOP
6C9  00EE0                           LOAD se, se                    ; NOP
6CA  00EE0                           LOAD se, se                    ; NOP

6CB  20085                           CALL SPI_32_bit_tx_rx
6CC  200C3                           CALL store_reg_in_second_slot
6CD  206CF                           CALL DTREE_f1_0016_3           ; Delay for 17 cycles
6CE  226D3                           JUMP DTREE_f1_0016_end
6CF  206D0          DTREE_f1_0016_3: CALL DTREE_f1_0016_2
6D0  206D1          DTREE_f1_0016_2: CALL DTREE_f1_0016_1
6D1  206D2          DTREE_f1_0016_1: CALL DTREE_f1_0016_0
6D2  25000          DTREE_f1_0016_0: RETURN
6D3               DTREE_f1_0016_end:
6D3  00EE0                           LOAD se, se                    ; NOP
6D4  00EE0                           LOAD se, se                    ; NOP
6D5  00EE0                           LOAD se, se                    ; NOP

6D6  206D8                           CALL DTREE_f1_0017_3           ; Delay for 17 cycles
6D7  226DC                           JUMP DTREE_f1_0017_end
6D8  206D9          DTREE_f1_0017_3: CALL DTREE_f1_0017_2
6D9  206DA          DTREE_f1_0017_2: CALL DTREE_f1_0017_1
6DA  206DB          DTREE_f1_0017_1: CALL DTREE_f1_0017_0
6DB  25000          DTREE_f1_0017_0: RETURN
6DC               DTREE_f1_0017_end:
6DC  00EE0                           LOAD se, se                    ; NOP
6DD  00EE0                           LOAD se, se                    ; NOP
6DE  00EE0                           LOAD se, se                    ; NOP

6DF  206E1                           CALL DTREE_f1_0018_3           ; Delay for 17 cycles
6E0  226E5                           JUMP DTREE_f1_0018_end
6E1  206E2          DTREE_f1_0018_3: CALL DTREE_f1_0018_2
6E2  206E3          DTREE_f1_0018_2: CALL DTREE_f1_0018_1
6E3  206E4          DTREE_f1_0018_1: CALL DTREE_f1_0018_0
6E4  25000          DTREE_f1_0018_0: RETURN
6E5               DTREE_f1_0018_end:
6E5  00EE0                           LOAD se, se                    ; NOP
6E6  00EE0                           LOAD se, se                    ; NOP
6E7  00EE0                           LOAD se, se                    ; NOP

6E8  2007F                           CALL SPI_disable
6E9  20021                           CALL send_CR
6EA  20023                           CALL send_NL
6EB  01572                           LOAD s5, "r"
6EC  20001                           CALL UART_TX
6ED  20065                           CALL send_64_bit
6EE  20021                           CALL send_CR
6EF  20023                           CALL send_NL
6F0  25000                           RETURN

6F1                   dummy_routine:
6F1                                  ;REMOVED: RETURN

6F1                      cold_start:
6F1                                  ;REMOVED: CALL delay_1s                  ;
6F1                                  ;REMOVED: CALL reset_UART_macros         ;Reset buffers in UART macros

6F1                                  ;=============================
6F1                                  ;== MAIN APPLICATION CODE
6F1                            main:
6F1  200B5                           CALL delay_1s
6F2  2000F                           CALL clear_screen
6F3  20019                           CALL cursor_home
6F4  01B05                           LOAD sb, welcome_message'upper
6F5  01ACD                           LOAD sa, welcome_message'lower
6F6  2005E                           CALL send_message
6F7  20021                           CALL send_CR
6F8  20023                           CALL send_NL
6F9  2007F                           CALL SPI_disable
6FA                                  ;;  sja1105 send configuration to ..
6FA  200D2                           CALL sja_config
6FB                                  ;; write clock registers
6FB  20593                           CALL delay_60
6FC  20610                           CALL write_clock_registers

6FD                       main_loop:
6FD  20021                           CALL send_CR
6FE  20023                           CALL send_NL
6FF  01B06                           LOAD sb, command_sel_message'upper
700  01A00                           LOAD sa, command_sel_message'lower
701  2005E                           CALL send_message
702  20021                           CALL send_CR
703  20023                           CALL send_NL

704                                  ;;  SPI operation selection



704  2005A                           CALL obtain_char
705  1D55B                           COMPARE s5, "["
706  30082                           CALL z, SPI_enable

707  1D557                           COMPARE s5, "W"
708  30606                           CALL z, SPI_send_32_bit

709  1D55D                           COMPARE s5, "]"
70A  3007F                           CALL z, SPI_disable

70B  1D577                           COMPARE s5, "w"
70C  3068A                           CALL z, SPI_send_64bit

70D  1D567                           COMPARE s5, "g"
70E  300D2                           CALL z, sja_config

70F                                  ;; compare s5, "r"
70F                                  ;;	call z, sja_prog_regs

70F  226FD                           JUMP main_loop
710                                  ;REMOVED: JUMP main
710                                  ;; ------------------------------------


710                                  ;;  acquire 8 chars from uart
710                                  ;;  tx echo of each one
710                                  ;;  send to spi the 32 bit
710                                  ;;;



710                                  ;=============================
710                                  ;== SPECIAL CODE

710                                  ; Guard to avoid falling into the ISR code.
710                                  ; All unused memory jumps into this loop.
710                                  ; You could also try to recover or restart.
710                                  DEFAULT_JUMP fatal_error
710  22710              fatal_error: JUMP fatal_error               ; Infinite loop




All unused memory locations contain a DEFAULT_JUMP to 710


PSM files that have been assembled
----------------------------------
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/sja1105_terminal.asm
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/uart_interface_routines.asm
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/scratchpad_manager.asm
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/spi_routines.asm
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/sja_config.asm
    /home/bini/gcu4garfield/Firmware_GCU1F3/src/picoblaze/asm/software_delays.asm


List of defined constants
-------------------------
    CONSTANT name         Value       Source PSM file            
 ----------------         -----       ---------------            
    BEL                   07
    BS                    08
    CR                    0D
    DCS                   90
    DEL                   7F
    ESC                   1B
    HT                    09
    LF                    0A
    NUL                   00
    SPI_data_in_port      03          spi_routines.asm
    SPI_output_port       04          spi_routines.asm
    ST                    9C
    Saved_Byte0           00          scratchpad_manager.asm
    Saved_Byte1           01          scratchpad_manager.asm
    Saved_Byte2           02          scratchpad_manager.asm
    Saved_Byte3           03          scratchpad_manager.asm
    Saved_Byte4           04          scratchpad_manager.asm
    Saved_Byte5           05          scratchpad_manager.asm
    Saved_Byte6           06          scratchpad_manager.asm
    Saved_Byte7           07          scratchpad_manager.asm
    UART_RX6_input_port   01          uart_interface_routines.asm
    UART_Rx_data_present  00001000'b  uart_interface_routines.asm
 *  UART_Rx_full          00100000'b  uart_interface_routines.asm
 *  UART_Rx_half_full     00010000'b  uart_interface_routines.asm
    UART_TX6_output_port  01          uart_interface_routines.asm
 *  UART_Tx_data_present  00000001'b  uart_interface_routines.asm
    UART_Tx_full          00000100'b  uart_interface_routines.asm
 *  UART_Tx_half_full     00000010'b  uart_interface_routines.asm
    UART_operate          00000000'b  uart_interface_routines.asm
    UART_reset            00000011'b  uart_interface_routines.asm
 *  UART_rx_reset         00000010'b  uart_interface_routines.asm
    UART_status_port      00          uart_interface_routines.asm
 *  UART_tx_reset         00000001'b  uart_interface_routines.asm
    VT                    0B
    datestamp_day         14
    datestamp_month       02
    datestamp_year        14
    decimal0              02          uart_interface_routines.asm
 *  decimal1              03          uart_interface_routines.asm
 *  decimal2              04          uart_interface_routines.asm
 *  decimal3              05          uart_interface_routines.asm
    decimal4              06          uart_interface_routines.asm
 *  hex_value0            00          uart_interface_routines.asm
 *  hex_value1            01          uart_interface_routines.asm
    reset_UART_port       01          uart_interface_routines.asm
    spi_clk               00000001'b  spi_routines.asm
    spi_clk_n             11111110'b  spi_routines.asm
    spi_cs                00000000'b  spi_routines.asm
    spi_cs_b              00000010'b  spi_routines.asm
    spi_miso              10000000'b  spi_routines.asm
    spi_mosi              10000000'b  spi_routines.asm
    spi_mosi_n            01111111'b  spi_routines.asm
    timestamp_hours       0C
    timestamp_minutes     2A
    timestamp_seconds     3B

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name       Value                                                Source PSM file     
 --------------       -----                                                ---------------     
    command_sel_str$  "CMD>"                                               sja1105_terminal.asm
    datestamp$        "20 Feb 2020"
    timestamp$        "12:42:59"
    welcome_str$      "<* GCU 1F3 SJA1150 switch programming terminal *>"  sja1105_terminal.asm


List of line labels
-------------------
    Label                     Addr  Source PSM file            
 --------                     ----  ---------------            
    ASCII_letter              046   uart_interface_routines.asm
    ASCII_to_hex              03C   uart_interface_routines.asm
    DTREE_f1_0001_0           639   sja1105_terminal.asm
    DTREE_f1_0001_1           638   sja1105_terminal.asm
    DTREE_f1_0001_2           637   sja1105_terminal.asm
    DTREE_f1_0001_3           636   sja1105_terminal.asm
    DTREE_f1_0001_end         63A   sja1105_terminal.asm
    DTREE_f1_0002_0           642   sja1105_terminal.asm
    DTREE_f1_0002_1           641   sja1105_terminal.asm
    DTREE_f1_0002_2           640   sja1105_terminal.asm
    DTREE_f1_0002_3           63F   sja1105_terminal.asm
    DTREE_f1_0002_end         643   sja1105_terminal.asm
    DTREE_f1_0003_0           64B   sja1105_terminal.asm
    DTREE_f1_0003_1           64A   sja1105_terminal.asm
    DTREE_f1_0003_2           649   sja1105_terminal.asm
    DTREE_f1_0003_3           648   sja1105_terminal.asm
    DTREE_f1_0003_end         64C   sja1105_terminal.asm
    DTREE_f1_0004_0           656   sja1105_terminal.asm
    DTREE_f1_0004_1           655   sja1105_terminal.asm
    DTREE_f1_0004_2           654   sja1105_terminal.asm
    DTREE_f1_0004_3           653   sja1105_terminal.asm
    DTREE_f1_0004_end         657   sja1105_terminal.asm
    DTREE_f1_0005_0           65F   sja1105_terminal.asm
    DTREE_f1_0005_1           65E   sja1105_terminal.asm
    DTREE_f1_0005_2           65D   sja1105_terminal.asm
    DTREE_f1_0005_3           65C   sja1105_terminal.asm
    DTREE_f1_0005_end         660   sja1105_terminal.asm
    DTREE_f1_0006_0           668   sja1105_terminal.asm
    DTREE_f1_0006_1           667   sja1105_terminal.asm
    DTREE_f1_0006_2           666   sja1105_terminal.asm
    DTREE_f1_0006_3           665   sja1105_terminal.asm
    DTREE_f1_0006_end         669   sja1105_terminal.asm
    DTREE_f1_0007_0           672   sja1105_terminal.asm
    DTREE_f1_0007_1           671   sja1105_terminal.asm
    DTREE_f1_0007_2           670   sja1105_terminal.asm
    DTREE_f1_0007_3           66F   sja1105_terminal.asm
    DTREE_f1_0007_end         673   sja1105_terminal.asm
    DTREE_f1_0008_0           67B   sja1105_terminal.asm
    DTREE_f1_0008_1           67A   sja1105_terminal.asm
    DTREE_f1_0008_2           679   sja1105_terminal.asm
    DTREE_f1_0008_3           678   sja1105_terminal.asm
    DTREE_f1_0008_end         67C   sja1105_terminal.asm
    DTREE_f1_0009_0           684   sja1105_terminal.asm
    DTREE_f1_0009_1           683   sja1105_terminal.asm
    DTREE_f1_0009_2           682   sja1105_terminal.asm
    DTREE_f1_0009_3           681   sja1105_terminal.asm
    DTREE_f1_0009_end         685   sja1105_terminal.asm
    DTREE_f1_0010_0           697   sja1105_terminal.asm
    DTREE_f1_0010_1           696   sja1105_terminal.asm
    DTREE_f1_0010_2           695   sja1105_terminal.asm
    DTREE_f1_0010_3           694   sja1105_terminal.asm
    DTREE_f1_0010_end         698   sja1105_terminal.asm
    DTREE_f1_0011_0           6A0   sja1105_terminal.asm
    DTREE_f1_0011_1           69F   sja1105_terminal.asm
    DTREE_f1_0011_2           69E   sja1105_terminal.asm
    DTREE_f1_0011_3           69D   sja1105_terminal.asm
    DTREE_f1_0011_end         6A1   sja1105_terminal.asm
    DTREE_f1_0012_0           6A9   sja1105_terminal.asm
    DTREE_f1_0012_1           6A8   sja1105_terminal.asm
    DTREE_f1_0012_2           6A7   sja1105_terminal.asm
    DTREE_f1_0012_3           6A6   sja1105_terminal.asm
    DTREE_f1_0012_end         6AA   sja1105_terminal.asm
    DTREE_f1_0013_0           6B5   sja1105_terminal.asm
    DTREE_f1_0013_1           6B4   sja1105_terminal.asm
    DTREE_f1_0013_2           6B3   sja1105_terminal.asm
    DTREE_f1_0013_3           6B2   sja1105_terminal.asm
    DTREE_f1_0013_end         6B6   sja1105_terminal.asm
    DTREE_f1_0014_0           6BE   sja1105_terminal.asm
    DTREE_f1_0014_1           6BD   sja1105_terminal.asm
    DTREE_f1_0014_2           6BC   sja1105_terminal.asm
    DTREE_f1_0014_3           6BB   sja1105_terminal.asm
    DTREE_f1_0014_end         6BF   sja1105_terminal.asm
    DTREE_f1_0015_0           6C7   sja1105_terminal.asm
    DTREE_f1_0015_1           6C6   sja1105_terminal.asm
    DTREE_f1_0015_2           6C5   sja1105_terminal.asm
    DTREE_f1_0015_3           6C4   sja1105_terminal.asm
    DTREE_f1_0015_end         6C8   sja1105_terminal.asm
    DTREE_f1_0016_0           6D2   sja1105_terminal.asm
    DTREE_f1_0016_1           6D1   sja1105_terminal.asm
    DTREE_f1_0016_2           6D0   sja1105_terminal.asm
    DTREE_f1_0016_3           6CF   sja1105_terminal.asm
    DTREE_f1_0016_end         6D3   sja1105_terminal.asm
    DTREE_f1_0017_0           6DB   sja1105_terminal.asm
    DTREE_f1_0017_1           6DA   sja1105_terminal.asm
    DTREE_f1_0017_2           6D9   sja1105_terminal.asm
    DTREE_f1_0017_3           6D8   sja1105_terminal.asm
    DTREE_f1_0017_end         6DC   sja1105_terminal.asm
    DTREE_f1_0018_0           6E4   sja1105_terminal.asm
    DTREE_f1_0018_1           6E3   sja1105_terminal.asm
    DTREE_f1_0018_2           6E2   sja1105_terminal.asm
    DTREE_f1_0018_3           6E1   sja1105_terminal.asm
    DTREE_f1_0018_end         6E5   sja1105_terminal.asm
    DTREE_f3_0001_0           094   spi_routines.asm
    DTREE_f3_0001_1           093   spi_routines.asm
    DTREE_f3_0001_2           092   spi_routines.asm
    DTREE_f3_0001_end         095   spi_routines.asm
    DTREE_f3_0002_0           0A1   spi_routines.asm
    DTREE_f3_0002_1           0A0   spi_routines.asm
    DTREE_f3_0002_2           09F   spi_routines.asm
    DTREE_f3_0002_end         0A2   spi_routines.asm
    DTREE_f6_0001_0           59E   sja_config.asm
    DTREE_f6_0001_1           59D   sja_config.asm
    DTREE_f6_0001_2           59C   sja_config.asm
    DTREE_f6_0001_3           59B   sja_config.asm
    DTREE_f6_0001_4           59A   sja_config.asm
    DTREE_f6_0001_5           599   sja_config.asm
    DTREE_f6_0001_6           598   sja_config.asm
    DTREE_f6_0001_7           597   sja_config.asm
    DTREE_f6_0001_8           596   sja_config.asm
    DTREE_f6_0001_9           595   sja_config.asm
    DTREE_f6_0001_end         59F   sja_config.asm
    DTREE_f6_0002_0           5A9   sja_config.asm
    DTREE_f6_0002_1           5A8   sja_config.asm
    DTREE_f6_0002_2           5A7   sja_config.asm
    DTREE_f6_0002_3           5A6   sja_config.asm
    DTREE_f6_0002_4           5A5   sja_config.asm
    DTREE_f6_0002_5           5A4   sja_config.asm
    DTREE_f6_0002_6           5A3   sja_config.asm
    DTREE_f6_0002_7           5A2   sja_config.asm
    DTREE_f6_0002_8           5A1   sja_config.asm
    DTREE_f6_0002_end         5AA   sja_config.asm
    DTREE_f6_0003_0           5B3   sja_config.asm
    DTREE_f6_0003_1           5B2   sja_config.asm
    DTREE_f6_0003_2           5B1   sja_config.asm
    DTREE_f6_0003_3           5B0   sja_config.asm
    DTREE_f6_0003_4           5AF   sja_config.asm
    DTREE_f6_0003_5           5AE   sja_config.asm
    DTREE_f6_0003_6           5AD   sja_config.asm
    DTREE_f6_0003_7           5AC   sja_config.asm
    DTREE_f6_0003_end         5B4   sja_config.asm
    DTREE_f6_0004_0           5BC   sja_config.asm
    DTREE_f6_0004_1           5BB   sja_config.asm
    DTREE_f6_0004_2           5BA   sja_config.asm
    DTREE_f6_0004_3           5B9   sja_config.asm
    DTREE_f6_0004_4           5B8   sja_config.asm
    DTREE_f6_0004_5           5B7   sja_config.asm
    DTREE_f6_0004_6           5B6   sja_config.asm
    DTREE_f6_0004_end         5BD   sja_config.asm
    DTREE_f6_0005_0           5C4   sja_config.asm
    DTREE_f6_0005_1           5C3   sja_config.asm
    DTREE_f6_0005_2           5C2   sja_config.asm
    DTREE_f6_0005_3           5C1   sja_config.asm
    DTREE_f6_0005_4           5C0   sja_config.asm
    DTREE_f6_0005_5           5BF   sja_config.asm
    DTREE_f6_0005_end         5C5   sja_config.asm
    DTREE_f6_0006_0           5C9   sja_config.asm
    DTREE_f6_0006_1           5C8   sja_config.asm
    DTREE_f6_0006_2           5C7   sja_config.asm
    DTREE_f6_0006_end         5CA   sja_config.asm
    SPI_32_bit_tx_rx          085   spi_routines.asm
 *  SPI_FLASH_tx_rx           085   spi_routines.asm
    SPI_clock_pulse           085   spi_routines.asm
    SPI_disable               07F   spi_routines.asm
    SPI_enable                082   spi_routines.asm
    SPI_send_32_bit           606   sja1105_terminal.asm
    SPI_send_64bit            68A   sja1105_terminal.asm
    SPI_send_64bit_nouart     632   sja1105_terminal.asm
    UART_RX                   006   uart_interface_routines.asm
    UART_TX                   001   uart_interface_routines.asm
    build_value               050   uart_interface_routines.asm
    capture_miso              0A7   spi_routines.asm
    clear_screen              00F   uart_interface_routines.asm
 *  cold_start                6F1   sja1105_terminal.asm
    command_sel_message       600   sja1105_terminal.asm
    cursor_home               019   uart_interface_routines.asm
    delay_1ms                 0B1   software_delays.asm
    delay_1s                  0B5   software_delays.asm
 *  delay_20ms                0B5   software_delays.asm
    delay_60                  593   sja_config.asm
    div10_loop                05A   uart_interface_routines.asm
    div10_restore             05A   uart_interface_routines.asm
    div10_shifts              05A   uart_interface_routines.asm
    divide_16bit_by_10        05A   uart_interface_routines.asm
 *  dummy_routine             6F1   sja1105_terminal.asm
    end_spi_routine           0B0   spi_routines.asm
    fatal_error               710   sja1105_terminal.asm
    fetch_reg_in_first_slot   0C8   scratchpad_manager.asm
    fetch_reg_in_second_slot  0CD   scratchpad_manager.asm
    hex_to_ASCII              031   uart_interface_routines.asm
    int_to_BCD_loop           05A   uart_interface_routines.asm
    integer16_to_BCD          05A   uart_interface_routines.asm
    main                      6F1   sja1105_terminal.asm
    main_loop                 6FD   sja1105_terminal.asm
    next_SPI_FLASH_bit        085   spi_routines.asm
    next_int_digit            05A   uart_interface_routines.asm
    number_char               034   uart_interface_routines.asm
    obtain_char               05A   uart_interface_routines.asm
    obtain_digit              049   uart_interface_routines.asm
    obtain_value              048   uart_interface_routines.asm
    read_Rx                   00D   uart_interface_routines.asm
    reset_UART_macros         001   uart_interface_routines.asm
    rx_timeout                007   uart_interface_routines.asm
    send_32_bit               076   uart_interface_routines.asm
    send_64_bit               065   uart_interface_routines.asm
    send_CR                   021   uart_interface_routines.asm
    send_NL                   023   uart_interface_routines.asm
    send_hex_byte             025   uart_interface_routines.asm
 *  send_hex_word             025   uart_interface_routines.asm
 *  send_integer              05A   uart_interface_routines.asm
    send_integer_loop         05A   uart_interface_routines.asm
    send_message              05E   uart_interface_routines.asm
    send_one                  09A   spi_routines.asm
 *  send_space                025   uart_interface_routines.asm
 *  send_zero                 08D   spi_routines.asm
    sja_config                0D2   sja_config.asm
    software_delay            0B9   software_delays.asm
    spi_loop                  086   spi_routines.asm
    store_reg_in_first_slot   0BE   scratchpad_manager.asm
    store_reg_in_second_slot  0C3   scratchpad_manager.asm
    upper_case                036   uart_interface_routines.asm
    welcome_message           5CD   sja1105_terminal.asm
    write_clock_registers     610   sja1105_terminal.asm
    zero_integer              05A   uart_interface_routines.asm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name       Addr range   Value
   ----       ----------   -----
   keep_auto  (5CD - 605)  True


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          6
   ADDCY        1
   AND          7
   CALL         630
   CALL@        1
   COMPARE      8
   COMPARECY    -
   DISABLE      -
   ENABLE       -
   FETCH        20
   HWBUILD      -
   INPUT        5
   JUMP         48
   JUMP@        -
   LOAD         912
   LOAD&RETURN  57
   OR           6
   OUTPUT       7
   OUTPUTK      -
   REGBANK      -
   RETURN       61
   RETURNI      -
   RL           -
   RR           -
   SL0          2
   SL1          -
   SLA          6
   SLX          -
   SR0          11
   SR1          -
   SRA          -
   SRX          -
   STAR         -
   STORE        8
   SUB          9
   SUBCY        2
   TEST         2
   TESTCY       -
   XOR          -
